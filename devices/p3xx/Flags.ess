/// P3XX devices flags|state parser objects
///

// P3XX parsed health implementation
object P3XX_Health
{
	esU32 f_errors;
	
  /// Constructor
  new(health)
  {
    f_errors = health;
  }

  /// Return health errors as string collection
  function errorsAsStrings()
  var result = []; 
  {
    if(f_errors & P3XX_Error$$Batt)
      result += P3XX_Error$$Batt$$label;
  
    return result;
  }
  /// Return health errors as string
  function asString()
  {
    return EsStr::fromArray(errorsAsStrings(), "; ", "", "");
  }
  /// return true if health critical error was latched
  property hasCriticalError;
  read: { return false; }
  /// return true if health non-critical error was latched
  property hasNonCriticalError;
  read: { return false; }
	/// Return true if error flags contain warnings
	property hasWarning;
	read: { return f_errors & P3XX_Error$$Batt; }
  /// return true if any health error was latched
  property hasError;
  read: { return f_errors != 0;  }
  /// return errors as string collection
  property errorStrings;
  read: { return errorsAsStrings(); }	
}

// Measurement state object
object P3XX_State
{
	esU32 f_state;
	
	/// Return state as string array
	function stateAsStrings()
	var result = [];
	{
		if( f_state & P3XX_StateFlag$$Running )
			result += P3XX_StateFlag$$Running$$label;
		if( f_state & P3XX_StateFlag$$Overload )
			result += P3XX_StateFlag$$Overload$$label;
		if( f_state & P3XX_StateFlag$$OverloadLatched )
			result += P3XX_StateFlag$$OverloadLatched$$label;
			
		return result;
	}
	/// Return state as string
  function asString()
  {
    return EsStr::fromArray(stateAsStrings(), "; ", "", "");
  }
	
	/// Properties
	///
	/// Return state as esU32
	property state;
	read: { return f_state$value; }
	/// Return parsed state strings
	property stateString;
	read: { return stateAsStrings(); }
	/// Return true if state is running
	property isRunning;
	read: { return f_state & P3XX_StateFlag$$Running; }
}
