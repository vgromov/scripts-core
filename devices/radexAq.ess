// Scripting device support for pha-01 photo-appliance
##require("EsDeviceBase.ess");
##require("radexAq/Consts.ess");
##require("radexAq/FmtHelpers.ess");
##require("radexAq/Flags.ess");
##require("radexAq/Data.ess");
##require("radexAq/CalibrationAndSettings.ess");

/// RADEX_AQ device object
object RADEX_AQ extends EsDeviceBase
@nomarshal;
{
  var m_cfgCache;

/// Mandatory base overrides
  function rpcNameGetById(rpcId)
  {
    if( rpcId in RADEX_AQ_Rpid )
      return RADEX_AQ_Rpid.valueLabelGet(rpcId);
    
    return EsDeviceBase::rpcNameGetById(rpcId);
  }
  
  function rpcSigGetById(rpcId)
  {
    if( rpcId in RADEX_AQ_Rpid )
      return rpcSigGet(RADEX_AQ_Rpid.valueLabelGet(rpcId));
    
    return EsDeviceBase::rpcSigGetById(rpcId);
  }
  
  function fwIdAssert(fwId)
  {
    EsDeviceBase::fwIdAssert(fwId);
    fwIdValidate(
      fwId, 
      EsQuartaDeviceType$$RADEXAQ, 
      "RADEX_AQ"
    );
  }

  function fwIdDefaultSet()
  var now = EsDateTime::now();
  {
    m_fwId = new EsFirmwareId(EsQuartaDeviceType$$RADEXAQ);
    m_fwId.f_order = 0;
    m_fwId.f_year = now$year;
    m_fwId.f_month = now$month;
    m_fwId.f_day = now$dayOfMonth;
    m_fwId.f_countryCode = m_countryCode;
    m_fwId.f_hwConfig$standard = 0;
    m_fwId.f_hwConfig$custom = 0;
    
    m_fwId.f_fwVer.f_major = 1;
    m_fwId.f_fwVer.f_minor = 0;
  }
  
  function defaultCapsGet()
  var result = EsDeviceBase::defaultCapsGet() + RADEX_AQ_Rpid$values;
  {
    result += EsRpcStdId$$HEALTH_INFO_GET;
    result += EsRpcStdId$$DATETIME_GET;
    result += EsRpcStdId$$DATETIME_SET;
    result += EsRpcStdId$$SHUTDOWN;
    result += EsRpcStdId$$ENTER_BOOT;
    result += EsRpcStdId$$POWER_STATUS_GET;
    result += EsRpcStdId$$SW_INFO_GET;
    
    return result;
  }
  
  function rpcCallResultHandle(rpcId, rpcArgs, rpcResult)
  var cnt, result = null;
  {
    switch( rpcId )
    {
    case EsRpcStdId$$HEALTH_INFO_GET:
      result = new RADEX_AQ_Health(rpcResult);    // use RADEX_AQ health implementation instead of unparsed standard one
    case RADEX_AQ_Rpid$$LiveDataGet:
      {
        result = new RADEX_AQ_LiveData();
        
        if( !m_cfgCache#isEmpty() )
          result$isF = m_cfgCache$temperatureInF;
          
        result$buffer = rpcResult#asBinBuffer();
      }
    case RADEX_AQ_Rpid$$LiveDataGetRaw:
      {
        result = new RADEX_AQ_LiveDataRaw();
        result$buffer = rpcResult#asBinBuffer();
      }
    case RADEX_AQ_Rpid$$SaveDataNodeGet:
      {
        result = new RADEX_AQ_PersistentData();

        if( !m_cfgCache#isEmpty() )
          result$isF = m_cfgCache$temperatureInF;

        result$buffer = rpcResult#asBinBuffer();
      }
    case RADEX_AQ_Rpid$$SettingsGet:
      {
        result = new RADEX_AQ_Cfg();
        result$buffer = rpcResult#asBinBuffer();

        m_cfgCache = result;
      }
    case RADEX_AQ_Rpid$$SavedDataAllFrameGet:
      {
        if( 
          !rpcResult#isEmpty() && 
          rpcResult#countGet() >= 27 //< At least one full node
        )
        {
          result = new RADEX_AQ_PersistentDataBlock(
            rpcResult#asBinBuffer()
          );
        
          if( !m_cfgCache#isEmpty() )
            result$isF = m_cfgCache$temperatureInF;
        }
      }
    case RADEX_AQ_Rpid$$CalibrationGet:
      {
        result = new RADEX_AQ_Calibration();
        result$buffer = rpcResult#asBinBuffer();
      }
    default: 
      result = EsDeviceBase::rpcCallResultHandle(
        rpcId, 
        rpcArgs, 
        rpcResult
      );
    }
    
    return result;
  }
  
  /// Constructors
  new()
  {
    internalInit(null);
  }
  
  new(fwId)
  {
    internalInit(fwId);
  }
  
  /// RADEX_AQ custom response handlers
  ///
  
  /// Download settings object
  function settingsDownload()
  var 
    task = new EsProgressMonitorTask(
      $fwIdStrSafe
    ),
    settings = new RADEX_AQ_Settings(m_fwId), 
    rpcResult;
  {
    EsScriptDebug::log("RADEX_AQ::settingsDownload");
  
    task.attachTo(__scriptHost$progressMonitor);
    task.pulse(
      EsStr::translate(I"Downloading device settings...")
    );
  
    // Download software info
    rpcResult = swInfoQuery();
    if( rpcResult[0] )
      settings.f_swInfo.copyFrom( rpcResult[1] );
    else
      return rpcResult;
    
    rpcResult = rpcCall(RADEX_AQ_Rpid$$SettingsGet, null);
    
    if( rpcResult[0] )
    {
      settings.f_cfg.copyFrom( rpcResult[1] );
      task.end(
        EsStr::translate(I"Device settings downloaded")
      );
    }
    else
    {
      task.end(
        EsStr::translate(I"Failed to download Device settings")
      );
      return rpcResult;
    }
    
    EsScriptDebug::log("RADEX_AQ::settingsDownload\n%s", settings.asString());
    
    rpcResult = [];
    rpcResult += true;
    rpcResult += settings;
    
    return rpcResult;
  }
  
  /// Upload settings object
  function settingsUpload(settings)
  var task, rpcResult;
  {
    if( settings$fwId != m_fwId )
      throw EsStr::translate(I"Could not upload incompatible device settings");

    task = new EsProgressMonitorTask(
      $fwIdStrSafe
    );
      
    task.attachTo(__scriptHost$progressMonitor);
    task.pulse(
      EsStr::translate(I"Uploading device settings...")
    );
      
    rpcResult = rpcCall(
      RADEX_AQ_Rpid$$SettingsSet,
      settings$config
    );  
    
    if( rpcResult[0] )
    {
      task.end(
        EsStr::translate(I"Device settings uploaded")
      );
      
      m_cfgCache = settings$config;
      
      EsScriptDebug::log("RADEX_AQ::settingsUpload\n%s", settings.asString());
    }
    else
      task.end(
        EsStr::translate(I"Failed to upload Device settings")
      );
    
    return rpcResult;
  }
  
  // Download saved data
  function savedDataDownload(startIdx, endIdx)
  var task, rpcResult, tmp, idx, cnt = 0, 
    result = [], data = [], retries = 0;
  {
    rpcResult = rpcCall( RADEX_AQ_Rpid$$SavedDataCountGet, null );
    if( !rpcResult[0] )
      return rpcResult;
      
    cnt = rpcResult[1];
    if( 0 == cnt )
    {
      rpcResult[0] = false;
      rpcResult[1] = I"Nothing to download";
      return rpcResult; //< Nothing to download
    }
    
    if( endIdx#isEmpty() )
      endIdx = cnt-1;

    if( endIdx >= cnt )
      endIdx = cnt-1;
      
    if( startIdx#isEmpty() )
      startIdx = 0;
    
    if( startIdx < 0 )
      startIdx = 0;
    
    if( startIdx > endIdx )
    {
      tmp = startIdx;
      startIdx = endIdx;
      endIdx = tmp;
    }
    
    cnt = endIdx - startIdx + 1;
    if( 0 == cnt )
    {
      rpcResult[0] = false;
      rpcResult[1] = I"Nothing to download";
      return rpcResult; //< Nothing to download
    }    
    
    task = new EsProgressMonitorTask(
      $fwIdStrSafe,
      EsStr::translate(I"Downloading saved data..."),
      cnt,
      startIdx
    );
    task.attachTo(__scriptHost$progressMonitor);

    tmp = 1;
    if( cnt > 800 )
      tmp = 50;
    else if( cnt > 500 )
      tmp = 20;
    else if( cnt > 200 )
      tmp = 10;
    else if( cnt > 80 )
      tmp = 5;
    else if( cnt > 20 )
      tmp = 2;
    
    for( idx = startIdx; idx <= endIdx; ++idx )
    {
      do
      {
        rpcResult = rpcCall( RADEX_AQ_Rpid$$SaveDataNodeGet, idx );
        ++retries;
      }
      while( !rpcResult[0] && retries < 3 );
      
      if( rpcResult[0] )
      {
        data += rpcResult[1];
        retries = 0;
      }
      else
        break;

      if( 0 == (idx % tmp) )
        task$position = idx;
    }
    
    if( rpcResult[0] )
    {
      task.end(
        EsStr::translate(I"Saved data downloaded")
      );
      
      result += startIdx;     
      result += endIdx;
      result#append( data );
      rpcResult[1] = result;
    }
    else
    {
      rpcResult[1] = EsStr::translate(I"Failed to download all requested device data"); 
    
      task.end(
        rpcResult[1]
      );
    }
    
    return rpcResult;
  }
  
  // Delete saved data
  function savedDataClear()
  {
    return rpcCall( 
      RADEX_AQ_Rpid$$SavedDataNodesClear, 
      null 
    );
  }
  
  function allSavedDataDownload()
  var task, rpcResult, idx = 0, cnt = 0, 
    data = [], retries = 0, 
    node, nodeIdx, block;
  {
    rpcResult = rpcCall( RADEX_AQ_Rpid$$SavedDataAllFramesCntGet, null );
    if( !rpcResult[0] )
      return rpcResult;
      
    cnt = rpcResult[1];

    EsScriptDebug::log(
      "%d Frames to download",
      cnt
    );

    if( 0 == cnt )
    {
      rpcResult[0] = false;
      rpcResult[1] = I"Nothing to download";
      return rpcResult; //< Nothing to download
    }

    task = new EsProgressMonitorTask(
      $fwIdStrSafe,
      EsStr::translate(I"Downloading saved data..."),
      cnt,
      idx
    );
    task.attachTo(__scriptHost$progressMonitor);
   
    for( ; idx < cnt; ++idx )
    {
      do
      {
        rpcResult = rpcCall( RADEX_AQ_Rpid$$SavedDataAllFrameGet, idx );

        if( !rpcResult[0] )
        {
          // Analyze the reason for an error
          if( 
            EsExceptionFacility$$RPC == rpcResult[1]$facility &&
            rpcResult[1]$code in [1, [9 .. 16]] // TODO: use reflected RPC codes instead [EsRpcStatus$$NotImplemented, EsRpcStatus$$NotReady .. EsRpcStatus$$Cancelled]
          )
            break;
        }
        
        ++retries;
      }
      while( !rpcResult[0] && retries < 3 );
      
      if( rpcResult[0] )
      {
        block = rpcResult[1];
        if( !block#isEmpty() )
        {
          for(nodeIdx = 0; nodeIdx < block$count; ++nodeIdx)
          {
            node = block$nodes[nodeIdx];
/*
            EsScriptDebug::log(
              "Downloaded node: %s => %s",
              node$buffer,
              node#asString()
            );
*/
            data += node;
          }

          EsScriptDebug::log(
            "... %d nodes downloaded",
            data#countGet()
          );
        }
        else
          EsScriptDebug::log( "Empty block downloaded" );

        retries = 0;
      }
      else
        break;

      task$position = idx;

      EsScriptDebug::log(
        "%d of %d frames downloaded",
        idx+1,
        cnt
      );
    }
    
    if( rpcResult[0] )
    {
      task.end(
        EsStr::translate(I"Saved data downloaded")
      );
      
      rpcResult[1] = data;
    }
    else
    {
      rpcResult[1] = 
        EsStr::format(
          EsStr::translate(I"Failed to download all requested device data: %s"),
          rpcResult[1]$reason
        );
    
      task.end( rpcResult[1] );
    }
    
    return rpcResult;
  }
}
