// @file: esUploaderStm32.ess
// STM32-specific extension of FW uploader object
//
##require("esUploaderBase.ess");
##require("esMcuProgrammerStm32.ess");

object EsUploaderStm32 extends EsUploaderBase
{
  function enterBootWithShutdown(progressTask, rpcMaster)
  var chnl = rpcMaster$channel;
  {
    progressTask.pulse("Shutting down device...");
    rpcMaster.activate();
    rpcMaster.VOID_Call(EsRpcStdId$$SHUTDOWN);
    configurePowerOff(chnl);
    configureBoot(chnl);
    // Wait until device detects power off, and shuts down OK
    EsThreadWorker::sleep(2000);
    configurePowerOn(chnl);
    rpcMaster.deactivate();
  }
  
  /// Base class overrides
  ///
  function programmerCreate()
  {
    return new EsMcuprogStm32(
      EsStm32Flag$$UseReadProt |
      EsStm32Flag$$Verify, 
      m_moniker
    );
  }
  
  function chnlPrepareForBootloader(chnl)
  {
    EsUploaderBase::chnlPrepareForBootloader(chnl);
    chnl$parity = EsEkonnectIoParity$$Even;  
  }
    
  function chnlPrepareForDefaultNormalComm(chnl)
  {
    EsUploaderBase::chnlPrepareForDefaultNormalComm(chnl);
    chnl$parity = EsEkonnectIoParity$$None;
  }  

  // Restore channel settings, appicable for normal (ES-RPC) communications,
  // using saved baudrate
  function chnlPrepareForNormalComm(chnl)
  {
    EsUploaderBase::chnlPrepareForNormalComm(chnl);
    chnl$parity = EsEkonnectIoParity$$None;
  }  
  
  // Configure and ebnter boot mode, before programming device with ISP
  function configureForBoot(rpcMaster, supportedRpcs)
  var chnl = rpcMaster$channel, 
    supportsPowerCtl = chnl.hasMethod("devicePowerSet", 1),
    progressTask = new EsProgressMonitorTask("configureForBoot");
  {
    progressTask.attachTo(__scriptHost$progressMonitor);
    
    if( supportsPowerCtl && 
        !chnl$useRS232 &&
        (EsRpcStdId$$SHUTDOWN in supportedRpcs) )
    {
      try
      {
        enterBootWithShutdown(progressTask, rpcMaster);
        return true;
      }
      catch
      {
        rpcMaster.deactivate();
      }
    }

    return false;
  }  
}
