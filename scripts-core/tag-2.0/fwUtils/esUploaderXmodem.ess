##require("fwUtils/esUploaderBase.ess");
##require("fwUtils/esMcuProgrammerXmodem.ess");

// Quarta XMODEM firmware uploader
//
object EsQuartaXmodemUploader extends EsUploaderBase
{
  /// Base class overrides
  ///
  function programmerCreate()
  {
    return new EsQuartaXmodemProgrammer(
      m_moniker
    );
  }
  
  function enterBootWithWarmBoot(progressTask, rpcMaster)
  {
    rpcMaster.activate();
    rpcMaster.VOID_Call_esU32(EsRpcStdId$$ENTER_BOOT, 4000 + 1000*((m_moniker$binaryByteSize * 30) / m_preferredUploadBaud));
    rpcMaster.deactivate();

    progressTask.pulse("Performing Warm Boot...");
    EsThreadWorker::sleep(3000);
  }

  function configureForBoot(programmer, rpcMaster, supportedRpcs)
  var progressTask = new EsProgressMonitorTask("configureForBoot");
  {
    progressTask.attachTo(programmer$topTask);
    
    if( EsRpcStdId$$ENTER_BOOT in supportedRpcs )
    {
      try
      {
        enterBootWithWarmBoot(
          progressTask, 
          rpcMaster
        );

        return true;
      }
      catch
      {
        rpcMaster.deactivate();
      }
    }

    return false;
  }

  // Upload firmware 
  function upload(rpcMaster)
  var programmer = programmerCreate();
  var supportedRpcs, 
    deviceIsInBootMode = false, 
    alreadySynched = false;
  {  
    rpcMaster.deactivate();

    deviceIsInBootMode = checkIfStartedInBoot(
      rpcMaster$channel, 
      programmer
    );
    alreadySynched = deviceIsInBootMode;
    
    EsScriptDebug::log("In boot mode: %s", deviceIsInBootMode);
    if( !deviceIsInBootMode )
    {
      rpcMaster.activate();
      
      try
      {
        EsScriptDebug::log("Getting implemented RPCs");
        
        supportedRpcs = rpcMaster.getImplementedRPCs();
       
        EsScriptDebug::log("Implemented RPCs acquired");
      }
      catch
      {
        // error ocurred during the most basic device query
        // device may be already in boot mode
        rpcMaster.deactivate();
      }
      
      EsScriptDebug::log("Trying to enter boot with RPC WARM BOOT");
      deviceIsInBootMode = configureForBoot(
        programmer, 
        rpcMaster, 
        supportedRpcs
      );
    }

    try
    {
      EsScriptDebug::log("programmer.program with alreadySynched=%s", alreadySynched ? "Yes" : "No");

      rpcMaster.deactivate();

      programmer.program(
        rpcMaster$channel, 
        alreadySynched
      );
    }
    catch
    {
      completeUpload(rpcMaster$channel);
      rethrow;
    }
  }  
}
