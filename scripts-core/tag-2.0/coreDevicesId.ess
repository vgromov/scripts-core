// --------------------------- device identification
// firmware version
object EsFirmwareVersion
  @help = "Firmware version";
{
  esU8 f_major;
  esU8 f_minor;
  
  function asString()
  {
    return f_major.asString() + "." + f_minor.asString();
  }
  
  function compare(other) 
  {
    if( other#isString() )
      return EsStr::compare( asString(), other );
    else if( other.isKindOf("EsFirmwareVersion") )
    {
      if( f_major == other.f_major )
      {
        if( f_minor < other.f_minor )
          return -1;
        else if( f_minor > other.f_minor )  
          return 1;
        
        return 0;
      }
      else if( f_major < other.f_major )
        return -1;

      return 1;
    }
  
    return -1;
  }  
}

// device f_serial number
object EsDeviceSerial
@help = "Hardware serial number";
{
  esU16 f_year;
  esU16 f_order;

  function asString()
  {
    return EsStr::format("%05d-%02d", f_order, f_year%100);
  }
  
  function compare(other) 
  {
    if( other#isString() )
      return EsStr::compare( asString(), other );
    else if( other.isKindOf("EsDeviceSerial") )
    {
      if( f_year == other.f_year )
      {
        if( f_order < other.f_order )
          return -1;
        else if( f_order > other.f_order )  
          return 1;
        
        return 0;
      }
      else if( f_year < other.f_year )
        return -1;

      return 1;
    }
    
    return -1;
  }
}

// device f_uid
object EsDeviceUID
  @help = "Device Unique IDentification string";
{
  esU8 f_id[32];
  
  // f_uid comparison
  function compare(other)
  var idx = 0, c, co;
  {  
    if( other.isKindOf("EsDeviceUID") )
    {
      while(idx < 32)
      {
        c = f_id[idx];
        co = other.f_id[idx];
        if( c < co )
          return -1;
        else if( c > co )
          return 1;
          
        ++idx;
      }
    }
    else if( other#isIndexed() )
    {
      c = other#countGet();
      if( 32 < c )
        return -1;
      else if( 32 > c )
        return 1;
      
      while(idx < 32)
      {
        c = f_id[idx];
        co = other[idx];
        if( c < co )
          return -1;
        else if( c > co )
          return 1;
          
        ++idx;
      }
    }
    else 
      return -1;
    
    return 0;
  }
  
  /// Return generic string f_uid representation
  function asString()
  {
    return EsStr::fromByteString(f_id$buffer);
  }
  
  /// Try to set f_uid from string representation
  function uidFromString(uidStr)
  var ch, str = EsStr::toUpper(uidStr#asString());
  { 
    if( 32 != str#countGet() )
      throw "UID string length must be 32 symbols";
    foreach(ch in str)
      if( !EsStr::isHexChar(ch) )
        throw "UID string must contain only HEX symbols";
    f_id$buffer = EsStr::toByteString(str);
  }  
  
  new()
  var idx = 0;
  {
    while(idx < 32)
      f_id[idx++] = B'0';
  }
  
  /// Custom stream writer
  function streamWrite(stream)
  {
    stream.valueWrite(asString());
  }
  
  /// Custom stream reader
  function streamRead(stream)
  {
    uidFromString(stream.valueRead());
  }
  
  // value property, to allow UID reading|writing as string
  property value;
  @persistent;
  read: { return asString(); }
  write: { uidFromString(__value); }
}

// device firmware id as-string formatting flags
enum EsFirmwareIdFmtFlag
{
  DescrShort= 0;
  DescrLong = 1;
  Serial    = 2;
  Version    = 4;
  UID        = 8;
}

// device firmware comparison flags
enum EsFirmwareIdCmpFlag
{
  // device type is always used in comparison
  Type      = 0;
  Serial    = 1;
  Version    = 2;
  UID        = 4;
  Functionality=8;
  Significant= 3;
  All        = 0xF;
}

// hardware identifier
object EsFirmwareId
  @help = "Hardware identification result object";
{
  esU16 f_devType;
    @help = "Device type (model) id";
  
  EsDeviceSerial f_serial;
  EsFirmwareVersion f_fwVer;
  
  if( deviceIsHubFull(f_devType) )
  {
    EsDeviceUID f_uid;
    esU32 f_funcMask;
      @help = "Device functionality mask";

    function comparePartial(other, flags)
    var result = -1;
    {
      if( other.isKindOf("EsFirmwareId") &&
          deviceIsHubFull(other.f_devType) )
      {
        if( f_devType > other.f_devType )
          result = 1;
        else if( f_devType == other.f_devType )
          result = 0;
          
        if( 0 == result && (flags & EsFirmwareIdCmpFlag$$Serial))
        {
          if( f_serial > other.f_serial )
            result = 1;
          else if( f_serial < other.f_serial )
            result = -1;
        }
        
        if( 0 == result && (flags & EsFirmwareIdCmpFlag$$Version))
        {
          if(  f_fwVer > other.f_fwVer )
            result = 1;
          else if( f_fwVer < other.f_fwVer )
            result = -1;
        }
        
        if( 0 == result && (flags & EsFirmwareIdCmpFlag$$UID))
        {
          if( f_uid > other.f_uid )
            result = 1;
          else if( f_uid < other.f_uid )
            result = -1;
        }
        
        if( 0 == result && (flags & EsFirmwareIdCmpFlag$$Functionality))
        {
          if( f_funcMask > other.f_funcMask )
            result = 1;
          else if( f_funcMask < other.f_funcMask )
            result = -1;
        }
      }
      
      return result;
    }
      
    function compare(other)
    {
      return comparePartial(other, EsFirmwareIdCmpFlag$$Significant);
    }
    
    // r-o access to the hub's Unique IDentifier string
    property UID;
    read: { return f_uid; }    
    
    // access functionality mask as collection of nodes,
    // [0] - 'function is active' flag, [1] - function description
    property functionality;
    read:  var result = [], node = [[false, ""]],
          fr = deviceHubFunctionalityRecordGet(f_devType),
          pluginRec, bit = 1, mask = f_funcMask#asULong();
        {
          foreach(pluginRec in fr)
          {
            node[0][0] = bit == (mask & bit);
            node[0][1] = pluginRec[EsHubDatabaseField$$PluginDescrLong];
            result += node;
            bit <<= 1;
          }
          return result;
        }
    write:  var node, bit = 1, mask = 0;
        {
          foreach(node in __value)
          {
            if( node[0] )
              mask |= bit;
            bit <<= 1;
          }
          f_funcMask = mask;
        }
  }
  else
  {
    function comparePartial(other, flags)
    var result = -1;
    {
      if( other.isKindOf("EsFirmwareId") &&
          !deviceIsHubFull(other.f_devType) )
      {
        if( f_devType > other.f_devType )
          result = 1;
        else if( f_devType == other.f_devType )
          result = 0;
          
        if( 0 == result && (flags & EsFirmwareIdCmpFlag$$Serial))
        {
          if( f_serial > other.f_serial )
            result = 1;
          else if( f_serial < other.f_serial )
            result = -1;
        }
        
        if( 0 == result && (flags & EsFirmwareIdCmpFlag$$Version))
        {
          if(  f_fwVer > other.f_fwVer )
            result = 1;
          else if( f_fwVer < other.f_fwVer )
            result = -1;
        }
      }
      
      return result;
    }

    function compare(other)
    {
      return comparePartial(other, EsFirmwareIdCmpFlag$$Significant);
    }
  }
  
  // services
  //
  function asString(flags)
  @help = "Return string representation of the hardware id depending on formatting flags";
  var result = "";
  {
    if( flags & EsFirmwareIdFmtFlag$$DescrLong )
      result += deviceDescriptionLongGet(f_devType);
    else
      result += deviceDescriptionShortGet(f_devType);
    
    if( flags & EsFirmwareIdFmtFlag$$Serial )
    {
      if( !result#isEmpty() )
        result += "; ";
      result += f_serial.asString();
    }
    
    if( flags & EsFirmwareIdFmtFlag$$Version )
    {
      if( !result#isEmpty() )
        result += "; ";
      result += f_fwVer.asString();
    }

    if( (flags & EsFirmwareIdFmtFlag$$UID) && hasField("f_uid") )
    {
      if( !result#isEmpty() )
        result += "; ";
      result += fieldGet("f_uid").asString();
    }

    return result;
  }

  function asString()
    @help = "Return standard string representation of the hardware id";
  {
    return asString(EsFirmwareIdFmtFlag$$DescrLong|
                    EsFirmwareIdFmtFlag$$Serial|
                    EsFirmwareIdFmtFlag$$Version|
                    EsFirmwareIdFmtFlag$$UID);  
  }
  
  /// Return firmware ID string in universal parseable form
  function asIdString()
  var result;
  {
    result = "T:" + f_devType;
    result += ",Y:" + f_serial.f_year;
    result += ",O:" + f_serial.f_order;
    result += ",V:" + f_fwVer.asString();
    
    if( hasField("f_uid") )
      result += ",U:" + fieldGet("f_uid").asString();
        
    if( hasField("f_funcMask") )
      result += EsStr::format(",F:0x%0X", fieldGet("f_funcMask"));    
    
    return result;
  }
  
  new()
  {
    f_devType = EsDeviceType$$ECOL1;
  }
  
  new(type)
  {
    f_devType = type;
  }
  
  property fwIdString;
  read: { return asString(); }
  
  // read-only access to the dev id components
  property devType;
  read: { return f_devType; }
  
  property devTypeName;
  read: { return deviceDescriptionLongGet(f_devType); }

  property ver;
  read: { return f_fwVer; }
  
  property verMajor;
  read: { return f_fwVer.f_major; }

  property verMinor;
  read: { return f_fwVer.f_minor; }
  
  property serial;
  read: { return f_serial; }
  
  property year;
  read: { return f_serial.f_year; }

  property order;
  read: { return f_serial.f_order; }
}

/// Try to read and return device firmware id object,
/// using either standard (legacy) method, or the modern one
///
function deviceFwIdRead(rpcMaster, procedureType)
var fwId, rpcResult;
{
  if( procedureType in [EsRpcStdId$$FWID_GET, EsRpcStdId$$FWID_MODERN_GET] )
  {
    try
    {
      rpcResult = rpcMaster.esBA_Call(procedureType);
      if( !rpcResult#isEmpty() )
      {
        fwId = new EsFirmwareId();
        fwId$buffer = rpcResult#asBinBuffer();
      }
    }
    catch
    {
    }
  
    return fwId;
  }
}

/// Try to read and return legacy device firmware id object (compatibility shortcut)
function deviceFwIdRead(rpcMaster)
{
  return deviceFwIdRead(rpcMaster, EsRpcStdId$$FWID_GET);
}

/// Try to read and return modern device firmware id object
function deviceFwIdModernRead(rpcMaster)
{
  return deviceFwIdRead(rpcMaster, EsRpcStdId$$FWID_MODERN_GET);
}

/// Try to read UID from the device. If device is HUB, request returns its 16 byte Unique ID
/// otherwise, null is returned.
///
function deviceHwUidRead(rpcMaster)
var hwUid, rpcResult;
{
  try
  {
    rpcResult = rpcMaster.esBA_Call(EsRpcStdId$$HW_UID_GET);
    if( !rpcResult#isEmpty() )
    {
      hwUid = new EsDeviceUID();
      hwUid$buffer = rpcResult#asBinBuffer();
    }
  }
  catch
  {}
  
  return hwUid;
}
// --------------------------- end device identification
