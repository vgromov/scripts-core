// hardware identifier
object EsFirmwareId
  @help = "Firmware identification result object";
{
  esU16 f_devType;
    @help = "Device type (model) id";
    
  if( (f_devType in EsQuartaDeviceType) || (f_devType in [EsDeviceType$$LUPINX]) )
  {
    if( (f_devType in EsQuartaDeviceType) )
    {
      esU16 f_dummy;
    }
    
    /// Order
    esU32 f_order;
    /// Year
    esU16 f_year;
    /// Month
    esU8 f_month;
    /// Day of month
    esU8 f_day;
    /// Version
    EsVerInfo f_fwVer;
    /// Country code, as in ISO 3166-1-numeric 
    esU16 f_countryCode;
    /// Hardware configuration
    EsHwConfigInfo f_hwConfig;
    
    /// Services
    ///
    
    function comparePartial(other, flags)
    var result = -1;
    {
      if( other.isKindOf("EsFirmwareId") )
      {
        if( f_devType > other.f_devType )
          result = 1;
        else if( f_devType == other.f_devType )
          result = 0;
          
        if( 0 == result && (flags & EsFirmwareIdCmpFlag$$Serial))
        {
          if( f_order > other.f_order )
            result = 1;
          else if( f_order < other.f_order )
            result = -1;
          else 
            result = 0;

          if( 0 == result )
          {
            if(f_year > other.f_year )
              result = 1;
            else if( f_year < other.f_year )
              result = -1;
            else
              result = 0;
          }

          if( 0 == result )
          {
            if(f_month > other.f_month )
              result = 1;
            else if( f_month < other.f_month )
              result = -1;
            else
              result = 0;
          }

          if( 0 == result )
          {
            if(f_day > other.f_day )
              result = 1;
            else if( f_day < other.f_day )
              result = -1;
            else
              result = 0;
          }
        }
        
        if( 0 == result && (flags & EsFirmwareIdCmpFlag$$Version))
        {
          if( f_fwVer > other.f_fwVer )
            result = 1;
          else if( f_fwVer < other.f_fwVer )
            result = -1;
        }
      }
      
      return result;
    }

    function compare(other)
    {
      return comparePartial(other, EsFirmwareIdCmpFlag$$Significant);
    }
    
    function asString(flags)
    @help = "Return string representation of the hardware id depending on formatting flags";
    {
      return fmtEcoE(flags, f_devType, f_year, f_order, f_month, f_day, null, null, f_fwVer.f_major, f_fwVer.f_minor, f_countryCode, f_hwConfig.f_standard, f_hwConfig.f_custom);
    }

    function asString()
      @help = "Return standard string representation of the hardware id";
    {
      return asString(EsFirmwareIdFmtFlag$$DescrLong|
                      EsFirmwareIdFmtFlag$$Serial|
                      EsFirmwareIdFmtFlag$$Version
      );
    }
    
    /// Return firmware ID string in universal parseable form
    function asIdString(flags)
    {
      return fmtUniversal(flags, f_devType, f_year, f_order, f_month, f_day, null, null, f_fwVer.f_major, f_fwVer.f_minor, f_countryCode, f_hwConfig.f_standard, f_hwConfig.f_custom);
    }

    function asIdString()
    {
      return asIdString(EsFirmwareIdFmtFlag$$Serial|
                        EsFirmwareIdFmtFlag$$Version
      );
    }  
    
    property order;
    read: { return f_order; }
    write: { f_order = __value#asULong(); }
    
    property year;
    read: { return f_year; }

    property month;
    read: { return f_month; }

    property day;
    read: { return f_day; }
    
    property date;
    read: var dt = EsDateTime::now(); 
    { 
      try
      {
        dt$year = f_year;
        dt$month = f_month;
        dt$dayOfMonth = f_day;
      }
      catch
      {
      }
      
      return dt; 
    }
    write: var dt = EsDateTime::now(); 
    {
      try
      {
        dt$year = __value$year;
        dt$month = __value$month;
        dt$dayOfMonth = __value$day;
      }
      catch
      {
      }
      
      f_year = dt$year;
      f_month = dt$month;
      f_day = dt$dayOfMonth;
    }

    property countryCode;
    read: { return f_countryCode; }
    
    property hwConfigInfo;
    read: { return f_hwConfig; }    
  }
  else
  {
    EsDeviceSerial f_serial;
    EsVerInfo f_fwVer;
    
    if( deviceIsHubFull(f_devType) )
    {
      EsDeviceUID f_uid;
      esU32 f_funcMask;
        @help = "Device functionality mask";

      function comparePartial(other, flags)
      var result = -1;
      {
        if( other.isKindOf("EsFirmwareId") &&
            deviceIsHubFull(other.f_devType) )
        {
          if( f_devType > other.f_devType )
            result = 1;
          else if( f_devType == other.f_devType )
            result = 0;
            
          if( 0 == result && (flags & EsFirmwareIdCmpFlag$$Serial))
          {
            if( f_serial > other.f_serial )
              result = 1;
            else if( f_serial < other.f_serial )
              result = -1;
          }
          
          if( 0 == result && (flags & EsFirmwareIdCmpFlag$$Version))
          {
            if(  f_fwVer > other.f_fwVer )
              result = 1;
            else if( f_fwVer < other.f_fwVer )
              result = -1;
          }
          
          if( 0 == result && (flags & EsFirmwareIdCmpFlag$$UID))
          {
            if( f_uid > other.f_uid )
              result = 1;
            else if( f_uid < other.f_uid )
              result = -1;
          }
          
          if( 0 == result && (flags & EsFirmwareIdCmpFlag$$Functionality))
          {
            if( f_funcMask > other.f_funcMask )
              result = 1;
            else if( f_funcMask < other.f_funcMask )
              result = -1;
          }
        }
        
        return result;
      }
        
      function compare(other)
      {
        return comparePartial(other, EsFirmwareIdCmpFlag$$Significant);
      }
      
      // r-o access to the hub's Unique IDentifier string
      property UID;
      read: { return f_uid; }    
      
      // access functionality mask as collection of nodes,
      // [0] - 'function is active' flag, [1] - function description
      property functionality;
      read:  var result = [], node = [[false, ""]],
            fr = deviceHubFunctionalityRecordGet(f_devType),
            pluginRec, bit = 1, mask = f_funcMask#asULong();
          {
            foreach(pluginRec in fr)
            {
              node[0][0] = bit == (mask & bit);
              node[0][1] = pluginRec[EsHubDatabaseField$$PluginDescrLong];
              result += node;
              bit <<= 1;
            }
            return result;
          }
      write:  var node, bit = 1, mask = 0;
          {
            foreach(node in __value)
            {
              if( node[0] )
                mask |= bit;
              bit <<= 1;
            }
            f_funcMask = mask;
          }
    }
    else
    {
      function comparePartial(other, flags)
      var result = -1;
      {
        if( other.isKindOf("EsFirmwareId") &&
            !deviceIsHubFull(other.f_devType) )
        {
          if( f_devType > other.f_devType )
            result = 1;
          else if( f_devType == other.f_devType )
            result = 0;
            
          if( 0 == result && (flags & EsFirmwareIdCmpFlag$$Serial))
          {
            if( f_serial > other.f_serial )
              result = 1;
            else if( f_serial < other.f_serial )
              result = -1;
          }
          
          if( 0 == result && (flags & EsFirmwareIdCmpFlag$$Version))
          {
            if(  f_fwVer > other.f_fwVer )
              result = 1;
            else if( f_fwVer < other.f_fwVer )
              result = -1;
          }
        }
        
        return result;
      }

      function compare(other)
      {
        return comparePartial(other, EsFirmwareIdCmpFlag$$Significant);
      }
    }
  
    // services
    //
    function asString(flags)
      @help = "Return string representation of the FW id depending on formatting flags";
      var uid, func;
    {
      if( hasField("f_uid") )
        uid = fieldGet("f_uid");

      if( hasField("f_funcMask") )
        func = fieldGet("f_funcMask");

      return fmtEcoE(flags, f_devType, f_serial.f_year, f_serial.f_order, null, null, func, uid, f_fwVer.f_major, f_fwVer.f_minor, null, null, null);
    }

    function asString()
      @help = "Return standard string representation of the hardware id";
    {
      return asString(EsFirmwareIdFmtFlag$$DescrLong|
                      EsFirmwareIdFmtFlag$$Serial|
                      EsFirmwareIdFmtFlag$$Version|
                      EsFirmwareIdFmtFlag$$UID);  
    }
    
    /// Return firmware ID string in universal parseable form
    function asIdString()
      var uid, func;
    {
      if( hasField("f_uid") )
        uid = fieldGet("f_uid");

      if( hasField("f_funcMask") )
        func = fieldGet("f_funcMask");

      return fmtUniversal(0xFFFF, f_devType, f_serial.f_year, f_serial.f_order, null, null, func, uid, f_fwVer.f_major, f_fwVer.f_minor, null, null, null);
    }
    
    property serial;
    read: { return f_serial; }
    
    property year;
    read: { return f_serial$year; }

    property order;
    read: { return f_serial$order; }
  }
  
  new()
  {
    f_devType = EsDeviceType$$ECOL1;
  }
  
  new(type)
  {
    f_devType = type;
  }
  
  property fwIdString;
  read: { 
    return this.asString();
  }
  
  // Return just essential part of fw id string (short device type name + serial number)
  property fwIdStringEssential;
  read: { 
    return this.asString(
      EsFirmwareIdFmtFlag$$DescrShort|
      EsFirmwareIdFmtFlag$$Serial
    );
  }
  
  // read-only access to the dev id components
  property devType;
  read: { return f_devType$value; }
  
  property devTypeName;
  read: { return deviceDescriptionLongGet(f_devType); }

  property ver;
  read: { return this.f_fwVer; }
  
  property verMajor;
  read: { return this.f_fwVer$major; }

  property verMinor;
  read: { return this.f_fwVer$minor; }
  
  property fwIdStringUniversal;
  read: { return this.asIdString(); }
}

/// Try to read and return device firmware id object,
/// using either standard method, or the dual one
///
function deviceFwIdRead(rpcMaster, procedureType)
var fwId, rpcResult;
{
  if( procedureType in [EsRpcStdId$$FWID_GET, EsRpcStdId$$FWID_MODERN_GET] )
  {
    try
    {
      rpcResult = rpcMaster.esBA_Call(procedureType);
      if( !rpcResult#isEmpty() )
      {
        fwId = new EsFirmwareId();
        fwId$buffer = rpcResult#asBinBuffer();
      }
    }
    catch
    {
    }
  
    return fwId;
  }
}

/// Try to read and return legacy device firmware id object (compatibility shortcut)
function deviceFwIdRead(rpcMaster)
{
  return deviceFwIdRead(rpcMaster, EsRpcStdId$$FWID_GET);
}

/// Try to read and return dual device firmware id object
function deviceFwIdModernRead(rpcMaster)
{
  return deviceFwIdRead(rpcMaster, EsRpcStdId$$FWID_MODERN_GET);
}

/// Try to read and return device firmware ID (in single, or dual mode, depending on caps contents)
function deviceKnownCapsFwIdRead(rpcMaster, caps)
{
  if( caps#isEmpty() ) //< Nothing in caps, stick to generic routine
    return deviceFwIdRead(rpcMaster);
  else
  {
    if( EsRpcStdId$$FWID_MODERN_GET in caps )
      return deviceFwIdRead(rpcMaster, EsRpcStdId$$FWID_MODERN_GET);
    else
      return deviceFwIdRead(rpcMaster, EsRpcStdId$$FWID_GET);
  }
}
