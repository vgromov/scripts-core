##require( "core.ess" );

// ---------------- ekosfera binary data file parser

// standard sizes & offsets
enum EsBinDataFile 
{
  PageSize       = 128;  // binary file page size in bytes
  TagSize       = 8;    // file tag size in bytes
  HdrSize        = 16;    // file common header part size (tag+entrySize+entryCount)
  SpaceSize      = 110;  // page space available for data (128-EsBinDataFilePageHdr-CRC16)
}

// page tags 
//
// standard file page tags: HDR_MAIN, HDR, DATA, 8 0s == EMPTY_PAGE
const c_hdrMainTag             = "HDRMAIN ";
const c_hdrMainAdditionalTag   = "HDRMAIN+";
const c_hdrTag                = "HDR     ";
const c_hdrAdditionalTag       = "HDR+    ";
const c_dataTag                = "DATA    ";
const c_dataAdditionalTag      = "DATA+   ";
const c_emptyTag              = "\0\0\0\0\0\0\0\0";

// tag class
object EsBinDataFileTag
{
  UINT8 f_tagStr[EsBinDataFile$$TagSize];
  
  // tag services
  //
	/// To string conversion
	function asString()
	{
		return EsStr::fromByteString(f_tagStr$buffer);
	}
	
	/// From string conversion
	function tagFromString(tagStr)
	{
	  if( EsBinDataFile$$TagSize != tagStr#countGet() )
      throw EsStr::format("Tag string length must be %d symbols", EsBinDataFile$$TagSize);
    f_tagStr$buffer = EsStr::toByteString(tagStr);
	}
	
  // string comparison
  function compare(tagStr)
  {
    if( tagStr != asString() )
      return -1;
          
    return 0;
  }
  
	/// Custom stream writer
	function streamWrite(stream)
	{
		stream.valueWrite( asString() );
	}
	
	/// Custom stream reader
	function streamRead(stream)
	{
		tagFromString( stream.valueRead() );
	}
	
/// Properties
	// access tag as string
	property tag;
	read: { return asString(); }
	write: { tagFromString(__value); }
  // predefined headers check
  property isHdrMain;
  read: { return 0 == compare(c_hdrMainTag); }
  property isHdrMainAdditional;
	read: { return 0 == compare(c_hdrMainAdditionalTag); }  
  property isHdr;
  read: { return 0 == compare(c_hdrTag); }
  property isHdrAdditional;
  read: { return 0 == compare(c_hdrAdditionalTag); }
  property isData;
  read: { return 0 == compare(c_dataTag); }
  property isDataAdditional;
  read: { return 0 == compare(c_dataAdditionalTag); }  
  property empty;
  read: { return 0 == compare(c_emptyTag); }
}

// ----------------------- data entry records
//
// PHA01 appliance
//
// PHA01-LUX
object EsBinDataFileIlluminanceEntry
  @help = "Illuminance data entry";
{
  DATETIME   f_ts;
    @label = "Timestamp";
  FLOAT      f_lux;
    @label = "Illuminance, lux";
  UINT16    f_kp;
    @label = "Pulsation, %";
  INT8      f_temp;
    @label = "T, °C";
		
/// Properties
///
	property ts;
	read: { return f_ts$value; }
	
	property lux;
	read: { return f_lux$value; }
	
	property kp;
	read: { return f_kp$value; }
}

object  EsBinDataFileIlluminanceEntry2
  @help = "Illuminance data entry";
{
  DATETIME   f_ts;
    @label = "Timestamp";
  FLOAT     f_luxOrg;
		@label = "Original illuminance, lux";
	FLOAT     f_luxBgnd;
		@label = "Background illuminance, lux";
	FLOAT     f_lux;
		@label = "Original-background illuminance, lux";
  FLOAT      f_kpOrg;
		@label = "Original pulsation, %";
  FLOAT      f_kp;
		@label = "Resulting pulsation, %";
  UINT16    f_bgndDuration;
		@label = "Duration of background measurement, s";

/// Properties
///
	property ts;
	read: { return f_ts$value; }

	property luxOrg;
	read: { return f_luxOrg$value; }

	property luxBgnd;
	read: { return f_luxBgnd$value; }
	
	property lux;
	read: { return f_lux$value; }
	
	property kpOrg;
	read: { return f_kpOrg$value; }

	property kp;
	read: { return f_kp$value; }

	property bgndExp;
	read: { return f_bgndDuration$value; }	
}

/// PHA01-CDM
object EsBinDataFileLuminanceEntry
  @help = "Luminance data entry";
{
  DATETIME   f_ts;
    @label = "Timestamp";
  FLOAT      f_cdm;
    @label = "Luminance, cd/m<sup>2</sup>";
  UINT16    f_kp;
    @label = "Pulsation, %";  
  INT8      f_temp;
    @label = "T, °C";
		
/// Properties
///
	property ts;
	read: { return f_ts$value; }
	
	property cdm;
	read: { return f_cdm$value; }
	
	property kp;
	read: { return f_kp$value; }		
}

object EsBinDataFileLuminanceEntry2
  @help = "Luminance data entry";
{
  DATETIME   f_ts;
    @label = "Timestamp";
  FLOAT      f_cdm;
    @label = "Luminance, cd/m<sup>2</sup>";
  UINT16    f_kp;
    @label = "Pulsation, %";  

/// Properties
///
	property ts;
	read: { return f_ts$value; }
	
	property cdm;
	read: { return f_cdm$value; }
	
	property kp;
	read: { return f_kp$value; }		
}

// PHA01-KEO
object EsBinDataFileDfEntry 
  @help = "KEO data entry";
{
  DATETIME   f_ts;
    @label = "Timestamp";
  FLOAT      f_luxIndoors;
    @label = "Indoors illuminance, lux";    
  FLOAT      f_luxOutdoors;
    @label = "Outdoors illuminance, lux";
  FLOAT      f_df;
    @label = "KEO, %";

/// Properties
///
	property ts;
	read: { return f_ts$value; }
	
	property luxIndoors;
	read: { return f_luxIndoors$value; }
	
	property luxOutdoors;
	read: { return f_luxOutdoors$value; }

	property df;
	read: { return f_df$value; }
}

// MK01 appliance
//
// MK01-TH
object EsBinDataFileClimaticBaseEntry
  @help = "Basic climatic data";
{
  DATETIME   f_ts;
    @label = "Timestamp";
  UINT32    f_state;
    @label = "Data state";
  FLOAT      f_ta;
    @label = "Air T, °C";
  FLOAT      f_rh;
    @label = "Relative humidity, %";
  FLOAT      f_td;
    @label = "Dew point, °C";
  FLOAT      f_tw;
    @label = "Natural wet-bulb T, °C";
  FLOAT      f_p;
    @label = "Barometric pressure, Pa";
		
/// Properties
///
	property ts;
	read: { return f_ts$value; }		
	
	/// Air temperature
	property tA;
	read: { return f_ta$value; }
	property tAvalid;
	read: { return !(f_state & ET01_Flag$$No_tA); }
	
	/// Relative humidity
	property rH;
	read: { return f_rh$value; }
	property rHvalid;
	read: { return !(f_state & ET01_Flag$$No_rH); }
	
	/// Dewpoint temperature
	property tD;
	read: { return f_td$value; }
	property tDvalid;
	read: { return !(f_state & ET01_Flag$$No_tD); }
	
	/// Wet thermometer temperature
	property tW;
	read: { return f_tw$value; }
	property tWvalid;
	read: { return !(f_state & ET01_Flag$$No_tW); }

	/// Pressure
	property p;
	read: { return f_p$value; }
	property pvalid;
	read: { return !(f_state & ET01_Flag$$No_p); }
}

// MK01-THV
object EsBinDataFileClimaticVelocityEntry
  @help = "Climatic data with air velocity";
{
  DATETIME   f_ts;
    @label = "Timestamp";
  UINT32     f_state;
    @label = "Data state";
  FLOAT      f_ta;
    @label = "Air T, °C";
  FLOAT      f_rh;
    @label = "Relative humidity, %";
  FLOAT      f_td;
    @label = "Dew point, °C";
  FLOAT      f_tw;
    @label = "Natural wet-bulb T, °C";
  FLOAT      f_tr;
		@label = "Radiation temperature, when airflow is less than 1 m/s, °C";
  FLOAT      f_t0;
		@label = "Resulting temperature, °C";
	FLOAT      f_w;
		@label = "Heat ratiation density";
	FLOAT      f_u;		
		@label = "Air velocity, m/s";
	FLOAT      f_p;
    @label = "Barometric pressure, Pa";
		
/// Properties
///
	property ts;
	read: { return f_ts$value; }		
	
	/// Air temperature
	property tA;
	read: { return f_ta$value; }
	property tAvalid;
	read: { return !(f_state & ET01_Flag$$No_tA); }
	
	/// Relative humidity
	property rH;
	read: { return f_rh$value; }
	property rHvalid;
	read: { return !(f_state & ET01_Flag$$No_rH); }
	
	/// Dewpoint temperature
	property tD;
	read: { return f_td$value; }
	property tDvalid;
	read: { return !(f_state & ET01_Flag$$No_tD); }
	
	/// Wet thermometer temperature
	property tW;
	read: { return f_tw$value; }
	property tWvalid;
	read: { return !(f_state & ET01_Flag$$No_tW); }
	
	/// Radiation temperature when airflow is less than 1 m/s
	property tR;
	read: { return f_tr$value; }
	property tRvalid;
	read: { return !(f_state & ET01_Flag$$No_tR); }

	/// Resulting temperature
	property t0;
	read: { return f_t0$value; }
	property t0valid;
	read: { return !(f_state & ET01_Flag$$No_t0); }
	
	/// Heat ratiation density
	property w;
	read: { return f_w$value; }
	property wvalid;
	read: { return !(f_state & ET01_Flag$$No_w); }
	
	/// Air velocity, valid if heaterTimer = 0 and mode id >= LiveUnlimited
	property u;
	read: { return f_u$value; }
	property uvalid;
	read: { return !(f_state & ET01_Flag$$No_u); }

	/// Pressure
	property p;
	read: { return f_p$value; }
	property pvalid;
	read: { return !(f_state & ET01_Flag$$No_p); }		
}

// MK01-IDX
object EsBinDataFileClimaticIndexesEntry
  @help = "Climatic indexes";
{
  DATETIME   f_ts;
    @label = "Timestamp";
  UINT32     f_state;
    @label = "Data state";
  FLOAT      f_ta;
    @label = "Air T, °C";
  FLOAT      f_rh;
    @label = "Relative humidity, %";
  FLOAT      f_td;
    @label = "Dew point, °C";
  FLOAT      f_tw;
    @label = "Natural wet-bulb T, °C";
  FLOAT      f_tg;
    @label = "Globe thermometer T, °C";
  FLOAT      f_wbgt;
    @label = "Wet bulb globe T, °C";
  FLOAT      f_wbgts;
    @label = "Wet bulb globe solar T, °C";
  FLOAT      f_tr;
    @label = "Mean radiant T, °C";
  FLOAT      f_w;
    @label = "Heat transfer rate, W/m²";
  FLOAT      f_p;
    @label = "Barometric pressure, Pa";
		
/// Properties
///
	property ts;
	read: { return f_ts$value; }		
	
	/// Air temperature
	property tA;
	read: { return f_ta$value; }
	property tAvalid;
	read: { return !(f_state & ET01_Flag$$No_tA); }
	
	/// Relative humidity
	property rH;
	read: { return f_rh$value; }
	property rHvalid;
	read: { return !(f_state & ET01_Flag$$No_rH); }
	
	/// Dewpoint temperature
	property tD;
	read: { return f_td$value; }
	property tDvalid;
	read: { return !(f_state & ET01_Flag$$No_tD); }
	
	/// Wet thermometer temperature
	property tW;
	read: { return f_tw$value; }
	property tWvalid;
	read: { return !(f_state & ET01_Flag$$No_tW); }
	
	/// Temperature inside black sphere, valid if sphere is connected
	property tG;
	read: { return f_tg$value; }
	property tGvalid;
	read: { return !(f_state & ET01_Flag$$No_tG); }

	/// Index WBGT, valid if sphere is connected
	property wBgt;
	read: { return f_wbgt$value; }
	property wBgtvalid;
	read: { return !(f_state & ET01_Flag$$No_wBgt); }

	/// Index WBGTs, valid if sphere is connected
	property wBgts;
	read: { return f_wbgts$value; }
	property wBgtsvalid;
	read: { return !(f_state & ET01_Flag$$No_wBgts); }
	
	/// Radiation temperature when airflow is less than 1 m/s
	property tR;
	read: { return f_tr$value; }
	property tRvalid;
	read: { return !(f_state & ET01_Flag$$No_tR); }
	
	/// Heat ratiation density
	property w;
	read: { return f_w$value; }
	property wValid;
	read: { return !(f_state & ET01_Flag$$No_w); }
	
	/// Pressure
	property p;
	read: { return f_p$value; }
	property pvalid;
	read: { return !(f_state & ET01_Flag$$No_p); }		
}

/// OCTAVA P381_X
object EsBinDataFileP381xGeomagneticEntry
	@help = "Geomagnetic field";
{
  DATETIME   	f_ts;
		@label = "Timestamp";
  UINT32 			f_duration;
		@label = "Measurement duration, s";
  FLOAT 			f_mktlExt;
		@label = "External field, mktl";
  DATETIME 		f_extTs;
		@label = "Timestamp of external field measurement";
  FLOAT 			f_mktlCur;
		@label = "Current field, mktl";
  FLOAT 			f_mktlMin;
		@label = "Minimum internal field, detected during measurement, mktl";
  FLOAT 			f_attCur; 
		@label = "Current field attenuation";
	FLOAT 			f_attMax;
		@label = "Maximum attenuation, detected during measurement";
}

object EsBinDataFileP381xConstMagneticEntry
	@help = "Constant magnetic field";
{
  DATETIME   f_ts;
		@label = "Timestamp";
  UINT32 		f_duration;
		@label = "Measurement duration, s";
  FLOAT 		f_mktlCur;
		@label = "Current field, mktl";
  FLOAT 		f_mktlMax;
		@label = "Maximum field, detected during measurement, mktl";
}

object EsBinDataFileP381x50hzMagneticEntry
	@help = "50hz magnetic field";
{
  DATETIME  	f_ts;
		@label = "Timestamp";
  UINT32 			f_duration;
		@label = "Measurement duration, s";
  FLOAT 			f_mktlCur;
		@label = "Current field, mktl";
  FLOAT 			f_mktlMax;
		@label = "Maximum field, detected during measurement, mktl";
}

/// OCTAVA P380E
object EsBinDataFileP380eElectrostaticEntry
	@help = "Electrostatic field";
{
  DATETIME 		f_ts;
		@label = "Timestamp";
  UINT32 			f_duration;
		@label = "Measurement duration, s";
  FLOAT 			f_e;
		@label = "Current field, V/m";
  FLOAT 			f_eMin;
		@label = "Minimum field, detected during measurement, V/m";
  FLOAT 			f_eMax;
		@label = "Maximum field, detected during measurement, V/m";
}

// ----------------------- Generalized page record
object EsBinDataFilePage
{
	// member vars
	var m_contentTagStr;
	
	// fields
  EsBinDataFileTag f_tag;
  UINT32 f_entrySize;
  UINT32 f_entryCnt;
	
  if( f_tag$isHdrMain ||
      f_tag$isHdrMainAdditional ||
      f_tag$isHdr ||
      f_tag$isHdrAdditional )
  {
    EsBinDataFileTag f_contentTag;
		
    if( f_contentTag$tag in [		/// pha-01 tags
																// old ones
																"LUX     ", 
																"CDM     ", 
																"KEO     ",
																// new ones
																"PHA01LUX",
																"PHA01CDM",
																"PHA01KEO",
																// mk-01 tags
																// old ones
																"TH      ", 
																"THV     ", 
																"IDX     ",
																// new ones
																"ET01TH  ",
																"ET01THV ",
																"ET01IDX ",
																// OCTAVA
																// OCTAVA P381x
																"P381XGM ",
																"P381XCM ",
																"P381X50M",
																// OCTAVA P380e
																"P380EST ",
																// Radon radiometer RAD01
																"RAD01   "
																] )
    {
      EsFirmwareId f_hubId;
        @label = "Hub ID";
      EsFirmwareId f_applId;
        @label = "Appliance ID";
  
			if( f_contentTag$tag in ["KEO     ", "PHA01KEO"] )
			{
				EsFirmwareId f_auxApplId;
					@label = "Aux. appliance ID";
			}
			else if( "RAD01   " == f_contentTag$tag )		
			{
				DATETIME f_ts;
					@label = "Timestamp";
				UINT32 f_errs;
					@label = "Latched errors at the beginning of measurements";
				UINT16 f_tPump;
					@label = "Pumping duration, s";
				UINT16 f_tMsr;
					@label = "Measurement duration, minutes";
				FLOAT f_na;
					@label = "Activity in marked windows";
				UINT32 f_nt;
					@label = "Thoron events";
				FLOAT f_temperature;
					@label = "Chamber temperature, °C";
				FLOAT f_humidity;
					@label = "Relative humidity, %";
				FLOAT f_pressure;
					@label = "Pressure, mm Hg";
				UINT8 f_state;      
					@label = "Radiometer peripheral state during measurement";
				UINT8 f_pumpSpeed;
					@label = "Pump speed at which measurement was made";
				UINT8 f_markers[3];
					@label = "3 spectrum markers, M0-M1-M2, used in activity measurements";
			}
		}
  }
	else if( f_tag$isData ||
					 f_tag$isDataAdditional	)
	{
		//conditional data arrays
		if( "LUX     " == m_contentTagStr )
			EsBinDataFileIlluminanceEntry f_nodes[f_entryCnt];
		else if( "PHA01LUX" == m_contentTagStr )
			EsBinDataFileIlluminanceEntry2 f_nodes[f_entryCnt];
		else if( "CDM     " ==  m_contentTagStr )
			EsBinDataFileLuminanceEntry f_nodes[f_entryCnt];
		else if( "PHA01CDM" ==  m_contentTagStr )
			EsBinDataFileLuminanceEntry2 f_nodes[f_entryCnt];
		else if( m_contentTagStr in ["KEO     ", "PHA01KEO"] )
			EsBinDataFileDfEntry f_nodes[f_entryCnt];
		else if( m_contentTagStr in ["TH      ", "ET01TH  "] )
			EsBinDataFileClimaticBaseEntry f_nodes[f_entryCnt];
		else if( m_contentTagStr in ["THV     ", "ET01THV "] )
			EsBinDataFileClimaticVelocityEntry f_nodes[f_entryCnt];
		else if( m_contentTagStr in ["IDX     ", "ET01IDX "] )
			EsBinDataFileClimaticIndexesEntry f_nodes[f_entryCnt];
		else if( "P381XGM " == m_contentTagStr )
			EsBinDataFileP381xGeomagneticEntry f_nodes[f_entryCnt];
		else if( "P381XCM " == m_contentTagStr )
			EsBinDataFileP381xConstMagneticEntry f_nodes[f_entryCnt];
		else if( "P381X50M" == m_contentTagStr )
			EsBinDataFileP381x50hzMagneticEntry f_nodes[f_entryCnt];
		else if( "P380EST " == m_contentTagStr )
			EsBinDataFileP380eElectrostaticEntry f_nodes[f_entryCnt];
		else if( "RAD01   " == m_contentTagStr )
			UINT16 f_nodes[f_entryCnt];
	}

/// Methods
///
/// Custom stream writer
	function streamWrite(stream)
	{
		if( !hasField("f_contentTag") )
			stream.propertiesWrite(this);
		stream.fieldsWrite(this);
	}
	
/// Custom stream reader
	function streamRead(stream)
	{
		stream.propertiesRead(this);
		stream.fieldsRead(this);	
	}
	
/// Properties
///
/// Delegated from f_tag
  property isHdrMain;
  read: { return f_tag$isHdrMain; }
  property isHdrMainAdditional;
	read: { return f_tag$isHdrMainAdditional; }  
  property isHdr;
  read: { return f_tag$isHdr; }
  property isHdrAdditional;
  read: { return f_tag$isHdrAdditional; }
  property isData;
  read: { return f_tag$isData; }
  property isDataAdditional;
  read: { return f_tag$isDataAdditional; }  
  property empty;
  read: { return f_tag$empty; }
/// content tag string
	property contentTagStr; @persistent;
	read: 
	{
		if( hasField("f_contentTag") )
			return fieldGet("f_contentTag")$tag;
		else if( !m_contentTagStr#isEmpty() )
			return m_contentTagStr#asString();
		
		return "";
	}
	write:
	{
		// NB! write only to the m_contentTagStr var, do not try to change f_contentTag field
		m_contentTagStr = __value;
	}
}

// --------------- bin file parser functions
//
function binDataFileBufferParse(buff)
 var cs16, cs16calc = new EsChecksum16(), pageIdx, pagesCnt, 
	pageBuff, pageBuffStart = 0, pageBuffEnd = EsBinDataFile$$PageSize, 
	curContentTagStr, pg, result = [];
{
  if( !buff#isEmpty() )
  {
		buff = buff#asBinBuffer();
    pagesCnt = buff#countGet() / EsBinDataFile$$PageSize;
    for(pageIdx = 0; pageIdx < pagesCnt; ++pageIdx)
    {
		  pageBuff = buff#sliceGet(pageBuffStart, pageBuffEnd);
			cs16calc$buffer = pageBuff;
			cs16 = cs16calc$value;
      if( 0 == cs16 )
			{
				pg = new EsBinDataFilePage();
				pg$contentTagStr = curContentTagStr;
				pg$buffer = pageBuff;
				curContentTagStr = pg$contentTagStr;
				result += pg;
				pageBuffStart = pageBuffEnd;
				pageBuffEnd += EsBinDataFile$$PageSize;
			}
// todo: report invalid page cs16	else
    }
  }
  
  return result;
}

// ---------------- ekosfera binary data file parser end
