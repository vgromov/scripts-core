// scripting device support for boi-01 hub
##require("../datafile.ess");
##require("EsDeviceBase.ess");

/// BOI01-specific rpcs 
enum BOI01_Rpid
{
  ColorSchemeGet  = 2048, "esBA_Call|Read GUI color scheme";
  ColorSchemeSet  = 2049, "VOID_Call_esBA|Set GUI color scheme";
}

/// ESGUI color type
object EsGuiColor
{
  esU8 f_b;
  esU8 f_g;
  esU8 f_r;
  esU8 f_a;
}

/// Session compacted date time expansion into normal date time string
function sessionNameExpand(sessName)
var ystr, mstr, dstr, hstr, minstr;
{
  // split sessionItemName into timestamp fragments
  ystr = sessName#sliceGet(0, 2);
  mstr = sessName#sliceGet(2, 4);
  dstr = sessName#sliceGet(4, 6);
  hstr = sessName#sliceGet(6, 8);
  minstr = sessName#sliceGet(9, 11);
  
  return "20"+ystr+"-"+mstr+"-"+dstr+" "+hstr+":"+minstr;
}

/// BOI01 ColorScheme object
object BOI01_ColorScheme
{
  EsGuiColor f_clDimmed;
  EsGuiColor f_clHighlight;
}

/// BOI01 Settings object

/// BOI01 Health object

/// BOI01 device object
object BOI01 extends EsDeviceBase
@nomarshal;
{
/// Mandatory overrides
  function rpcNameGetById(rpcId)
  {
    if( rpcId in BOI01_Rpid )
      return BOI01_Rpid.valueLabelGet(rpcId);
    
    return EsDeviceBase::rpcNameGetById(rpcId);
  }
  
  function rpcSigGetById(rpcId)
  {
    if( rpcId in BOI01_Rpid )
      return rpcSigGet(BOI01_Rpid.valueLabelGet(rpcId));
    
    return EsDeviceBase::rpcSigGetById(rpcId);
  }
  
  function fwIdAssert(fwId)
  {
    EsDeviceBase::fwIdAssert(fwId);
    fwIdValidate(fwId, [EsDeviceType$$BOI1, EsTenzorDeviceType$$TBOI1], "BOI01");
  }

  function fwIdDefaultSet()
  {
    m_fwId = new EsFirmwareId(EsDeviceType$$BOI1);
    m_fwId.f_serial.f_year = EsDateTime::now()$year;
    m_fwId.f_fwVer.f_major = 1;
    m_fwId.f_fwVer.f_minor = 16;
  }
  
  function rpcCallResultHandle(rpcId, rpcArgs, rpcResult)
  var result = null;
  {
    if( BOI01_Rpid$$ColorSchemeGet == rpcId )
    {
      result = new BOI01_ColorScheme();
      result$buffer = rpcResult;
    }
    else 
      result = EsDeviceBase::rpcCallResultHandle(rpcId, rpcArgs, rpcResult);
      
    return result;
  }
  
/// Custom BOI01 requests
///

/// Directory enumeration helper. Returned is [true|false, result]. If false, result is error reason string.
/// If true, result contains dir items collection, found under absDir root.
/// Optional 'excludeNames' parameter is collection of item names to be excluded from enumeration. Ignored, if null.
/// Optional 'includeAttrs' parameter is bit mask, 'item.f_attrs' to be checked against. Ignored, if null.
///
  function dirItemsEnum(task, absDir, excludeNames, includeAttrs)
  var result = dirListStart(absDir), item, items = [];
  {
    if( result[0] )
    {
      // start action progress
      task$text = EsStr::format(I"Enumerating: '%s'", absDir);
      
      while(true)
      {
        result = dirListGetNextItem();
        if( result[0] )
        {
          item = result[1];
          if( item#isEmpty() )
          {
            result[1] = items;
            break;
          }
          else
          {
            if( item$name in excludeNames )
              continue;
            if( !includeAttrs#isEmpty() && includeAttrs != (item.f_attrs & includeAttrs) )
              continue;
            // append to the collection
            items += item;
            // handle progress notification
            task$text = EsStr::format(I"Found: '%s'", item$name);
          }
        }
        else
          break;
      }
      // end action progress
      task.end( EsStr::format(I"Enumerated: '%s'", absDir) );
    }
    
    return result;
  }
  
/// Enumerate data files in BOI device, return [true|false, result], where
/// result is null if false, or enumerated files structure, if true
/// The structure format is as follows:
/// [pluginBlock 0, ..., pluginBlock N],
///    pluginBlock - [pluginDescriptionStr, [dataBlock 0, ..., dataBlock N]]
///    dataBlock - [dataTypeDescriptionStr, [deviceDataBlock 0, .. , deviceDataBlock N]]
///    deviceDataBlock - [deviceIdStr, [deviceSession 0, ..., deviceSession N]]
///    deviceSession - [absSessionFilePath, sessionTs, sessionFileSize]
  function dataFilesEnumerate()
  var plgItems, plgItem, plgDataTypeItems, plgDataTypeItem,
    plgDevBlockItems, plgDevBlockItem, plgSessionItems, plgSessionItem,
    plgRec, plgTypeRec, plgStr, plgDescr,  plgDataTypeStr, plgDataTypeDescr, sessName, sessTs,
    deviceSerial,  plgDataDir, plgDataTypeDir, plgDeviceSessionsDir,
    pluginBlocks = [], pluginBlock = ["", null], 
    dataBlocks, dataBlock = ["", null], 
    deviceDataBlocks, deviceDataBlock = ["", null],
    deviceSessions, deviceSession = ["", "", 0],
    task = new EsProgressMonitorTask(m_tmpFwIdStr),
    internalResult, result;
  {
    task.attachTo(__scriptHost$progressMonitor);
    result = dirItemsEnum(task, "/", [".", ".."], EsFsItemAttribute$$Directory);
    if( result[0] )
    {
      plgItems = result[1];
      // for each plugin dir enumerate its data dir
      foreach(plgItem in plgItems)
      {
        // fill-in plugin block info
        plgStr = plgItem$name;
        plgRec = deviceHubPluginFunctionalityRecordGet(m_fwId$devType, plgStr);
        if( plgRec#isEmpty() )
          plgDescr = EsStr::format(I"Unknown/unsupported plugin: '%s'", plgStr);
        else
          plgDescr = plgRec[EsHubDatabaseField$$PluginDescrLong];
        pluginBlock[0] = plgDescr;
        dataBlocks = [];
        // enumerate only known|supported plugin data
        if( !plgRec#isEmpty() )
        {
          plgDataDir = "/"+plgStr+"/DATA";
          internalResult = dirItemsEnum(task, plgDataDir, [".", ".."], EsFsItemAttribute$$Directory);
          if( internalResult[0] )
          {
            plgDataTypeItems = internalResult[1];
            // fill-in plugin data blocks
            foreach(plgDataTypeItem in plgDataTypeItems)
            {
              plgDataTypeStr = plgDataTypeItem$name;
              plgTypeRec = deviceHubPluginDataTypeRecordGet(m_fwId$devType, plgStr, plgDataTypeStr);
              if( plgTypeRec#isEmpty() )
                plgDataTypeDescr = EsStr::format(I"Unknown|unsupported plugin data type: '%s'", plgDataTypeStr);
              else
                plgDataTypeDescr = plgTypeRec[1];
              
              dataBlock[0] = plgDataTypeDescr;
              deviceDataBlocks = [];
              // enumerate device data blocks only for known data types
              if( !plgTypeRec#isEmpty() )
              {
                plgDataTypeDir = plgDataDir+"/"+plgDataTypeStr;
                internalResult = dirItemsEnum(task, plgDataTypeDir, [".", ".."], EsFsItemAttribute$$Directory);
                if( internalResult[0] )
                {
                  plgDevBlockItems = internalResult[1];
                  foreach(plgDevBlockItem in plgDevBlockItems)
                  {
                    deviceSerial = plgDevBlockItem$name;
                    deviceDataBlock[0] = deviceSerial;
                    deviceSessions = [];
                    // enumerate device sessions
                    plgDeviceSessionsDir = plgDataTypeDir+"/"+deviceSerial;
                    internalResult = dirItemsEnum(task, plgDeviceSessionsDir, [".", "..", "LISTING.DAT"], null);
                    if( internalResult[0] )
                    {
                      plgSessionItems = internalResult[1];
                      foreach(plgSessionItem in plgSessionItems)
                      {
                        sessName = plgSessionItem$name;
                        sessTs = sessionNameExpand(sessName);
                        deviceSession[0] = plgDeviceSessionsDir+"/"+sessName;
                        deviceSession[1] = sessTs;
                        deviceSession[2] = plgSessionItem.f_size$value;
                        
                        deviceSessions#append(deviceSession);
                      }
                    }
                    else
                      return internalResult;
                    
                    deviceDataBlock[1] = deviceSessions;
                    deviceDataBlocks#append(deviceDataBlock);
                  }
                }
                else
                  return internalResult;
              }
              
              dataBlock[1] = deviceDataBlocks;
              dataBlocks#append(dataBlock);
            }
          }
          else
            return internalResult;
        }
        
        pluginBlock[1] = dataBlocks;
        pluginBlocks#append(pluginBlock);
      }
    }
    result[1] = pluginBlocks;

    return result;
  }
  
  /// (Try to) Download and parse data file, given its absolute path.
  /// Return [true|false, result|error reason]
  function dataFileDownload(absFilePath)
  var fbuff, fparsed, result = fileRead(absFilePath), file;
  {
    if( result[0] )
    {
      try
      {
//        EsScriptDebug::log("Writing binary file...");
//        file = new EsFile("D:/Users/vsevolod/Documents/Projects/bigboi-1.0/scripts/boi_data_file.dat", EsFileFlag$$Write);
//        file.open();
//        file.writeAllAsBinBuffer(result[1]);
        
        fparsed = binDataFileBufferParse(result[1]);
				result[1] = fparsed;
      }
      catch
      {
        result[0] = false;
        result[1] = __exception$reason;
      }
    }
    
    return result;
  }
}
