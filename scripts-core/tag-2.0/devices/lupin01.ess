// LUPIN01 firmware information structure
//

object LUPIN01_FwInfo
{
  // order
  esU32 f_order;
  // year
  esU16 f_year;
  // month
  esU8 f_month;
  // day of month
  esU8 f_day;
  // version
  EsVerInfo f_ver;
  
  if( f_ver > "1.2" )
  {
    // Country code, as in ISO 3166-1-numeric 
    esU16 f_countryCode;
    // Hardware configuration
    EsHwConfigInfo f_hwConfig;
    
    function asString()
    {
      return EsStr::format(
        "%0.4d-%0.2d-%0.2d %lu",
        f_year,
        f_month,
        f_day,
        f_order
      ) + 
      EsStr::format(
        ".%d",
        f_countryCode
      ) +
      f_ver.asString() +
      EsStr::format(
        ".%d.%d",
        f_hwConfig.f_standard,
        f_hwConfig.f_custom
      );
    }
    
    property countryCode;
    read: { return f_countryCode$value; }
  }
  else
  {
    function asString()
    {
      return EsStr::format(
        "%0.4d-%0.2d-%0.2d %lu",
        f_year,
        f_month,
        f_day,
        f_order
      ) + 
      f_ver.asString();
    }
    
    property countryCode; //< Return Russia by default
    read: { return 643; }
  }
  
  if( f_ver > "1.3" )
  {
    // Additional info, containing calibration Calibration Factors
    esF f_lumDiv;   //< To get luminance value from the input one, we should divide the latter by f_lumDiv 
    esF f_pulsMul;  //< To get calibrated pulsation, we have to multiply input value by this factor
    
    function luminanceCalc(illum)
    {
      return illum / f_lumDiv;
    }

    function pulsationCalc(kp)
    {
      return kp * f_pulsMul;
    }

    property lumDiv;
    read: { return f_lumDiv$value; }

    property pulsMul;
    read: { return f_pulsMul$value; }
  }
  else
  {
    // Just to provide seamless calculation interface for older versions
    //
    
    function luminanceCalc(illum)
    {
      return illum / 3.07;
    }

    function pulsationCalc(kp)
    {
      return kp;
    }
    
    property lumDiv;
    read: { return 3.07; }

    property pulsMul;
    read: { return 1.; }
  }
  
  property devType;
  read: { return EsEcoeAccDeviceType$$LUPIN1; }
  
  property haveExtendedData;
  read: { return f_ver > "1.2"; }
  
  property fwIdStrEssential;
  read: { 
    return EsStr::format(
      "%0.4d-%0.2d-%0.2d %lu",
      f_year,
      f_month,
      f_day,
      f_order
    );
  }
}
