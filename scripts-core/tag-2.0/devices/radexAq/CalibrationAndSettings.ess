/// RADEX_AQ Calibration and settings data blocks
///

object RADEX_AQ_Cfg
{
  RADEX_AQ_Flags f_flags;
  RADEX_AQ_Screens f_screens;
  esU32 f_screenChangeTmo;
  esU32 f_bcklTmo;
  esU32 f_msrPeriod;
  esU8  f_dustType;
  esF   f_alertThreshold;
  esU8  f_lang[4];
  esU16 f_dummy;
  
  // Comparison support
  //
  function compare(other)
  {
    //EsScriptDebug::log(
    //  "Called compare on RADEX_AQ_Cfg"
    //);
  
    if( other#isEmpty() )
      return 1;
      
    if( !other#isKindOf("RADEX_AQ_Cfg") )  
      return 1;
      
    if( 
      f_flags$value != other.f_flags$value ||
      f_screens$value != other.f_screens$value ||
      f_screenChangeTmo != other.f_screenChangeTmo ||
      f_bcklTmo != other.f_bcklTmo ||
      f_msrPeriod != other.f_msrPeriod ||
      f_dustType != other.f_dustType ||
      f_alertThreshold != other.f_alertThreshold ||
      f_lang != other.f_lang
    )
    {
      // EsScriptDebug::log(
        // "...returning 1"
      // );
    
      return 1;
    }

    // EsScriptDebug::log(
      // "...returning 0"
    // );
    
    return 0;
  }
  
  // Flags 
  //
  property flags;
  @label = I"Configuration flags";
  read: { return f_flags.clone(); }
  write: {  
    if( !__value#isEmpty() )
    {
      if( __value#isNumeric() )
        f_flags$value = __value;
      else
        f_flags$value = __value$value;
    }
  }
  
  // Individual configuration flags delegates
  property sound;
  @label = I"Sound";
  @help = I"Toggle device sound";
  read: { return f_flags$sound; } 
  write: { f_flags$sound = __value; }
  
  property alert;
  @label = I"Alert threshold";
  @help = I"Toggle Dust concentration threshold alert";
  read: { return f_flags$alert; } 
  write: { f_flags$alert = __value; }

  property nightMode;
  @label = I"Night Mode";
  @help = I"Toggle device Night Mode";
  read: { return f_flags$nightMode; } 
  write: { f_flags$nightMode = __value; }

  property continuousBacklight;
  @label = I"Continuous backlight";
  @help = I"Toggle continuous backlight";
  read: { return f_flags$continuousBacklight; } 
  write: { f_flags$continuousBacklight = __value; }

  property bluetooth;
  @label = I"Bluetooth";
  @help = I"Toggle device Bluetooth module";
  read: { return f_flags$bluetooth; } 
  write: { f_flags$bluetooth = __value; }

  property continousMeasurements;
  @label = I"Continuos Measurements";
  @help = I"Toggle between continuous or periodic measurements";
  read: { return f_flags$continousMeasurements; } 
  write: { f_flags$continousMeasurements = __value; }

  property screenScrolling;
  @label = I"Screen Scrolling";
  @help = I"Toggle between screens scrolling and static single screen";
  read: { return f_flags$screenScrolling; } 
  write: { f_flags$screenScrolling = __value; }

  property temperatureInF;
  @label = I"Temperature °F";
  @help = I"Toggle device temperature units between °F or °C";
  read: { return f_flags$temperatureInF; } 
  write: { f_flags$temperatureInF = __value; }

  property timeInAmPm;
  @label = I"AM/PM";
  @help = I"Toggle between AM/PM and 24 hour time format in device";
  read: { return f_flags$timeInAmPm; } 
  write: { f_flags$timeInAmPm = __value; }
  
  // Screens
  property screens;
  @label = I"Screens configuration";
  read: { return f_screens.clone(); }
  write: {  
    if( !__value#isEmpty() )
    {
      if( __value#isNumeric() )
        f_screens$value = __value;
      else
        f_screens$value = __value$value;
    }
  }  
  
  // Individual screen flags
  property currentDust;
  @label = I"Current Dust concentration";
  @help = I"Include or exclude Current Dust concentration screen in/from screen sliding sequence";
  read: { return f_screens$currentDust; }
  write: { f_screens$currentDust = __value; }

  property currentDustMin;
  @label = I"Current Minimum Dust concentration";
  @help = I"Include or exclude Current Minimum Dust concentration screen in/from screen sliding sequence";
  read: { return f_screens$currentDustMin; }
  write: { f_screens$currentDustMin = __value; }

  property currentDustMed;
  @label = I"Current Mean Dust concentration";
  @help = I"Include or exclude Current Mean Dust concentration screen in/from screen sliding sequence";
  read: { return f_screens$currentDustMed; }
  write: { f_screens$currentDustMed = __value; }

  property currentDustMax;
  @label = I"Current Maximum Dust concentration";
  @help = I"Include or exclude Current Maximum Dust concentration screen in/from screen sliding sequence";
  read: { return f_screens$currentDustMax; }
  write: { f_screens$currentDustMax = __value; }

  property currentDustHistogram;
  @label = I"Current Dust concentration Histogram";
  @help = I"Include or exclude Current Dust concentration Histogram screen in/from screen sliding sequence";
  read: { return f_screens$currentDustHistogram; }
  write: { f_screens$currentDustHistogram = __value; }

  property dailyAvgDustMin;
  @label = I"Daily avg. minimum Dust concentration";
  @help = I"Include or exclude Daily avg. minimum Dust concentration screen in/from screen sliding sequence";
  read: { return f_screens$dailyAvgDustMin; }
  write: { f_screens$dailyAvgDustMin = __value; }
  
  property dailyAvgDustMed;
  @label = I"Daily Average Mean Dust concentration";
  @help = I"Include or exclude Daily Average Mean Dust concentration screen in/from screen sliding sequence";
  read: { return f_screens$dailyAvgDustMed; }
  write: { f_screens$dailyAvgDustMed = __value; }

  property dailyAvgDustMax;
  @label = I"Daily Average Maximum Dust concentration";
  @help = I"Include or exclude Daily Average Maximum Dust concentration screen in/from screen sliding sequence";
  read: { return f_screens$dailyAvgDustMax; }
  write: { f_screens$dailyAvgDustMax = __value; }

  property dailyAvgDustHistogram;
  @label = I"Daily Average Dust concentration Histogram";
  @help = I"Include or exclude Daily Average Dust concentration Histogram screen in/from screen sliding sequence";
  read: { return f_screens$dailyAvgDustHistogram; }
  write: { f_screens$dailyAvgDustHistogram = __value; }

  property currentTemperature;
  @label = I"Current Temperature";
  @help = I"Include or exclude Current Temperature screen in/from screen sliding sequence";
  read: { return f_screens$currentTemperature; }
  write: { f_screens$currentTemperature = __value; }
 
  property currentTemperatureMin;
  @label = I"Current Minimum Temperature";
  @help = I"Include or exclude Current Minimum Temperature screen in/from screen sliding sequence";
  read: { return f_screens$currentTemperatureMin; }
  write: { f_screens$currentTemperatureMin = __value; }

  property currentTemperatureMax;
  @label = I"Current Maximum Temperature";
  @help = I"Include or exclude Current Maximum Temperature screen in/from screen sliding sequence";
  read: { return f_screens$currentTemperatureMax; }
  write: { f_screens$currentTemperatureMax = __value; }

  property currentTemperatureHistogram;
  @label = I"Current Temperature Histogram";
  @help = I"Include or exclude Current Temperature Histogram screen in/from screen sliding sequence";
  read: { return f_screens$currentTemperatureHistogram; }
  write: { f_screens$currentTemperatureHistogram = __value; }

  property dailyAvgTemperatureMin;
  @label = I"Daily Average Minimum Temperature";
  @help = I"Include or exclude Daily Average Minimum Temperature screen in/from screen sliding sequence";
  read: { return f_screens$dailyAvgTemperatureMin; }
  write: { f_screens$dailyAvgTemperatureMin = __value; }

  property dailyAvgTemperatureMed;
  @label = I"Daily Average Mean Temperature";
  @help = I"Include or exclude Daily Average Mean Temperature screen in/from screen sliding sequence";
  read: { return f_screens$dailyAvgTemperatureMed; }
  write: { f_screens$dailyAvgTemperatureMed = __value; }

  property dailyAvgTemperatureMax;
  @label = I"Daily Average Maximum Temperature";
  @help = I"Include or exclude Daily Average Maximum Temperature screen in/from screen sliding sequence";
  read: { return f_screens$dailyAvgTemperatureMax; }
  write: { f_screens$dailyAvgTemperatureMax = __value; }

  property dailyAvgTemperatureHistogram;
  @label = I"Daily Average Temperature Histogram";
  @help = I"Include or exclude Daily Average Temperature Histogram screen in/from screen sliding sequence";
  read: { return f_screens$dailyAvgTemperatureHistogram; }
  write: { f_screens$dailyAvgTemperatureHistogram = __value; }

  property currentHumidity;
  @label = I"Current Humidity";
  @help = I"Include or exclude Current Humidity screen in/from screen sliding sequence";
  read: { return f_screens$currentHumidity; }
  write: { f_screens$currentHumidity = __value; }

  property currentHumidityMin;
  @label = I"Current Minimum Humidity";
  @help = I"Include or exclude Current Minimum Humidity screen in/from screen sliding sequence";
  read: { return f_screens$currentHumidityMin; }
  write: { f_screens$currentHumidityMin = __value; }

  property currentHumidityMax;
  @label = I"Current Maximum Humidity";
  @help = I"Include or exclude Current Maximum Humidity screen in/from screen sliding sequence";
  read: { return f_screens$currentHumidityMax; }
  write: { f_screens$currentHumidityMax = __value; }

  property currentHumidityHistogram;
  @label = I"Current Humidity Histogram";
  @help = I"Include or exclude Current Humidity Histogram screen in/from screen sliding sequence";
  read: { return f_screens$currentHumidityHistogram; }
  write: { f_screens$currentHumidityHistogram = __value; }

  property dailyAvgHumidityMin;
  @label = I"Daily Average Minimum Humidity";
  @help = I"Include or exclude Daily Average Minimum Humidity screen in/from screen sliding sequence";
  read: { return f_screens$dailyAvgHumidityMin; }
  write: { f_screens$dailyAvgHumidityMin = __value; }

  property dailyAvgHumidityMed;
  @label = I"Daily Average Mean Humidity";
  @help = I"Include or exclude Daily Average Mean Humidity screen in/from screen sliding sequence";
  read: { return f_screens$dailyAvgHumidityMed; }
  write: { f_screens$dailyAvgHumidityMed = __value; }

  property dailyAvgHumidityMax;
  @label = I"Daily Average Maximum Humidity";
  @help = I"Include or exclude Daily Average Maximum Humidity screen in/from screen sliding sequence";
  read: { return f_screens$dailyAvgHumidityMax; }
  write: { f_screens$dailyAvgHumidityMax = __value; }

  property dailyAvgHumidityHistogram;
  @label = I"Daily Average Humidity Histogram";
  @help = I"Include or exclude Daily Average Humidity Histogram screen in/from screen sliding sequence";
  read: { return f_screens$dailyAvgHumidityHistogram; }
  write: { f_screens$dailyAvgHumidityHistogram = __value; }

  property clock;
  @label = I"Current Date Time";
  @help = I"Include or exclude Current Date Time screen in/from screen sliding sequence";
  read: { return f_screens$clock; }
  write: { f_screens$clock = __value; }
  
  // Screen change timeout, if enabled in configuration flags
  property screenChangeTmo;
  @label = I"Screen update, [s]";
  @help = I"Screen sequence update timeout, [s]";
  @textPrompt = I"Value in seconds";
  @restriction = [RADEX_AQ_Defs$$ScrUpdateMin .. RADEX_AQ_Defs$$ScrUpdateMax];
  @lookup = [[I"5 s", 5], [I"10 s", 10], [I"15 s", 15], [I"20 s", 20], [I"30 s", 30], [I"1 min", 60], [I"2 min", 120], [I"3 min", 180], [I"4 min", 240]];
  @default = RADEX_AQ_Defs$$ScrUpdateDef;
  read: { return f_screenChangeTmo$value; }
  write: { f_screenChangeTmo$value = __value; }
  
  // Backlight OFF timeout, if not set continuous in config flags
  property bcklTmo;
  @label = I"Backlight timeout, [s]";
  @help = I"Screen backlight dimmer timeout, [s]";
  @textPrompt = I"Value in seconds";
  @restriction = [RADEX_AQ_Defs$$BcklTmoMin .. RADEX_AQ_Defs$$BcklTmoMax];
  @lookup = [[I"1 min", 60], [I"2 min", 120], [I"3 min", 180], [I"4 min", 240], [I"5 min", 300], [I"10 min", 600], [I"15 min", 900], 
    [I"20 min", 1200], [I"30 min", 1800], [I"1 hour", 3600]];
  @default = RADEX_AQ_Defs$$BcklTmoDef;
  read: { return f_bcklTmo$value; }
  write: { f_bcklTmo$value = __value; }
  
  // Measurement period, if not set to continuous in config flags
  property msrPeriod;
  @label = I"Measurement period, [s]";
  @help = I"Period between consequent measurements, [s]";
  @textPrompt = I"Value in seconds";
  @restriction = [RADEX_AQ_Defs$$MsrPeriodMin .. RADEX_AQ_Defs$$MsrPeriodMax];
  @default = RADEX_AQ_Defs$$MsrPeriodDef;
  @lookup = [[I"1 min", 60], [I"2 min", 120], [I"3 min", 180], [I"4 min", 240], [I"5 min", 300], [I"10 min", 600], [I"15 min", 900], 
    [I"20 min", 1200], [I"30 min", 1800], [I"1 hr", 3600], [I"2 hr", 7200], [I"3 hr", 10800], [I"4 hr", 14400], [I"5 hr", 18000], [I"6 hr", 21600], 
    [I"12 hr", 43200], [I"24 hr", 86400]];
  read: { return f_msrPeriod$value; }
  write: { f_msrPeriod$value = __value; }
  
  // Concentration alert threshold
  property alertThreshold;
  @label = I"Alert threshold, [mg/m³]";
  @help = I"Dust concentration alert threshold, [mg/m³]";
  @textPrompt = I"Value in [mg/m³]";
  @restriction = [RADEX_AQ_Defs$$DustAlertMin .. RADEX_AQ_Defs$$DustAlertMax];
  @default = RADEX_AQ_Defs$$DustAlertDef;
  @precision = 3;
  read: { return f_alertThreshold$value; }
  write: { f_alertThreshold$value = __value; }

  // Dust type awareness
  property dustType;
  @label = I"Dust type";
  @help = I"Dust type awareness selection";
  @restriction = RADEX_AQ_Dust;
  @default = RADEX_AQ_Dust$$Type0;
  read: { return f_dustType$value; }
  write: { f_dustType$value = __value; }

  // Language code selector
  property lang;
  @label = I"Language";
  @help = I"Device language selection";
  read: { return EsStr::fromByteString(f_lang$buffer, EsStrByteEncoding$$CP1251); }
  write: 
  var idx = 0, ch, str = "";
  {
    f_lang$buffer = B"\0\0\0\0";
    if( !__value#isEmpty() )
    {
      str = __value#asString();
      foreach( ch in str )
      {
        f_lang[idx++] = ch;
        if( idx >= 4 )
          break;
      }
    }
  }
}

/// RADEX_AQ device settings
object RADEX_AQ_Settings
{
  EsFirmwareId f_fwId;
  EsSoftwareInfo f_swInfo;
  RADEX_AQ_Cfg f_cfg;

  /// Constructors
  new()
  {
    f_fwId.copyFrom( 
      new EsFirmwareId(
        EsQuartaDeviceType$$RADEXAQ
      ) 
    );
  }
  
  new(fwId)
  {
    fwIdValidate(
      fwId, 
      EsQuartaDeviceType$$RADEXAQ, 
      "RADEX_AQ_Settings"
    );
    
    f_fwId.copyFrom(fwId);
  }
  
  /// Propertires
  ///
  property devType;
  read: { return f_fwId$devType; }
  
  property fwId;
  read: { return f_fwId.clone(); }
  
  property fwIdStringEssential;
  read: { return f_fwId$fwIdStringEssential; }
  
  property swInfo;
  read: { return f_swInfo.clone(); }

  property countryCode;
  read: { return f_swInfo$fwInfo$countryCode; }  
 
  property config;
  read: { return f_cfg.clone(); }
}
