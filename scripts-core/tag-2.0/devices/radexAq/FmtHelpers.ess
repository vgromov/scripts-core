/// RADEX_AQ Data formatting helpers
///
function RADEX_AQ_c2f(c)
{
  return (c * 9) / 5 + 32;
}

function RADEX_AQ_ValueFmt(val, allowNegative, prec)
var fmt;
{
  if( !allowNegative && val < 0 )
    val = 0;
    
  if( -1 != prec )
    fmt = "%0." + prec + "f";
  else
  {  
  if( val < 10 )
    fmt = "%0.2f";
  else if( val < 100 )
    fmt = "%0.1f";
  else
    fmt = "%0.0f";
  }
  
  return EsStr::lformat(
    EsStr::localeIdGet(), 
    EsStr::translate(
      fmt
    ), 
    val
  );
}

/// Multi part value string creation
function RADEX_AQ_strMultiGet(val, unit, baseUnitIdx, valid, allowNegative)
var mul = 1., result = [], unitIdx = baseUnitIdx, prec = -1; 
{
  if( !valid )
  {
    result += "--";
    result += "--";
    result += "--";
  }
  else
  {
    result += RADEX_AQ_ValueFmt( val, allowNegative, prec );
    if( EsMath::abs(val) > 1000. )
    {
      mul = 1000.;
      ++unitIdx;
    }
    else if( EsMath::abs(val) < 1. )
    {
      mul = 0.001;
      --unitIdx;
      prec = 0;
    }
    val /= mul;
    
    result += RADEX_AQ_ValueFmt( val, allowNegative, prec );

    result += EsStr::format("x%d", mul);
  }
  
  if( unit#isCollection() )
  {
    result += EsStr::translate( unit[baseUnitIdx] );
    result += EsStr::translate( unit[unitIdx] );
  }
  else
  {
    result += EsStr::translate( unit );  
  }
  
  return result;
}

/// Create simple string from multistring
function RADEX_AQ_fromStrMulti(multi)
{
  return multi[0] + " " + multi[3];
}
