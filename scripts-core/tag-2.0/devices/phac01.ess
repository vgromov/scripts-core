// Scripting device support for pha-01 photo-appliance
##require("EsDeviceBase.ess");
##require("../math/EsSpline.ess");
##require("phac01/Consts.ess");
##require("phac01/CorMatrix.ess");
##require("phac01/FmtHelpers.ess");
##require("phac01/Legacy.ess");
##require("phac01/Flags.ess");
##require("phac01/Data.ess");
##require("phac01/CalibrationAndSettings.ess");

/// PHAC01 device object
object PHAC01 extends EsDeviceBase
@nomarshal;
{
/// Device-specific vars
  var m_opMode;
  
/// Mandatory base overrides
  function rpcNameGetById(rpcId)
  {
    if( rpcId in PHAC01_Rpid )
      return PHAC01_Rpid.valueLabelGet(rpcId);
    
    return EsDeviceBase::rpcNameGetById(rpcId);
  }
  
  function rpcSigGetById(rpcId)
  {
    if( rpcId in PHAC01_Rpid )
      return rpcSigGet(PHAC01_Rpid.valueLabelGet(rpcId));
    
    return EsDeviceBase::rpcSigGetById(rpcId);
  }
  
  function fwIdAssert(fwId)
  {
    EsDeviceBase::fwIdAssert(fwId);
    fwIdValidate(fwId, EsDeviceType$$PHAC1, "PHAC01");
  }

  function fwIdDefaultSet()
  {
    m_fwId = new EsFirmwareId(EsDeviceType$$PHAC1);
    m_fwId.f_serial.f_year = EsDateTime::now()$year;
    m_fwId.f_fwVer.f_major = 1;
    m_fwId.f_fwVer.f_minor = 0;
  }
  
  function defaultCapsGet()
  var result = EsDeviceBase::defaultCapsGet() + PHAC01_Rpid$values;
  {
 	  result += EsRpcStdId$$HEALTH_EXEC;
		result += EsRpcStdId$$HEALTH_INFO_GET;
		result += EsRpcStdId$$DATETIME_GET;
		result += EsRpcStdId$$DATETIME_SET;
		result += EsRpcStdId$$FACTORY_RESET;
		result += EsRpcStdId$$SHUTDOWN;
		result += EsRpcStdId$$ENTER_BOOT;
		result += EsRpcStdId$$POWER_STATUS_GET;
		result += EsRpcStdId$$FINDME;
		result += EsRpcStdId$$SW_INFO_GET;
		
    return result;
  }
  
  function rpcCallResultHandle(rpcId, rpcArgs, rpcResult)
  var result = null;
  {
    if( EsRpcStdId$$HEALTH_INFO_GET == rpcId )
      result = new PHAC01_Health(rpcResult);    // use PHAC01 health implementation instead of unparsed standard one
    // Group all simple no-objects responses into one branch
    else if( 
      PHAC01_Rpid$$WorkmodeGet == rpcId ||
      PHAC01_Rpid$$BgndTmoGet == rpcId ||
      PHAC01_Rpid$$AutosaveTmoGet == rpcId ||
      PHAC01_Rpid$$DataCountGet == rpcId ||
      PHAC01_Rpid$$LegacyOperationModeGet == rpcId ||
      PHAC01_Rpid$$LegacyBgndPeriodLeftGet == rpcId ||
      PHAC01_Rpid$$LegacyAutosaveIntervalGet == rpcId
      )
    {
      result = rpcResult;
      
      // in addition, save currently active device opmode
      // it's vital for live data requests handling
      if( PHAC01_Rpid$$LegacyOperationModeGet == rpcId )
        m_opMode = PHAC01_fromLegacyOpmode(result);
      else if( PHAC01_Rpid$$WorkmodeGet == rpcId )
        m_opMode = result;
    }      
    else if( PHAC01_Rpid$$CalibrationClearGet == rpcId )
    {
      result = new PHAC01_CalibrationClear();
      result$buffer = rpcResult#asBinBuffer();
    }
    else if( PHAC01_Rpid$$CalibrationColorGet == rpcId )
    {
      result = new PHAC01_CalibrationColor();
      result$buffer = rpcResult#asBinBuffer();      
    }
    else if( PHAC01_Rpid$$LiveDataGet == rpcId )
    {
      result = new PHAC01_Data(); 
      result$buffer = rpcResult#asBinBuffer();
    }
    else if( PHAC01_Rpid$$RawDataGet == rpcId )
    {
      result = new PHAC01_RawData(); 
      result$buffer = rpcResult#asBinBuffer();
    }
    else if( PHAC01_Rpid$$DataAtIdxGet == rpcId )
    {
      result = new PHAC01_Data();
      result$buffer = rpcResult#asBinBuffer();
    }
    else if( PHAC01_Rpid$$LegacyLiveDataGet == rpcId )
    {
      if( PHAC01_LegacyOpMode$$LiveWoBgnd == PHAC01_toLegacyOpmode(m_opMode) )
        result = new PHAC01_LegacyDataWoBgnd();
      else
        result = new PHAC01_LegacyData();
        
      result$buffer = rpcResult#asBinBuffer();
    }
    else if( PHAC01_Rpid$$LegacyDataAtIdxGet == rpcId )
    {
      result = new PHAC01_LegacyData();
      result$buffer = rpcResult#asBinBuffer();
    }
    else 
      result = EsDeviceBase::rpcCallResultHandle(rpcId, rpcArgs, rpcResult);
    
    return result;
  }
  
  /// Constructors
  new()
  {
		internalInit(null);    
    m_opMode = PHAC01_OpMode$$None;
  }
  
  new(fwId)
  {
    internalInit(fwId);
    m_opMode = PHAC01_OpMode$$None;
  }
  
  /// PHAC01 custom response handlers
  ///
  /// Download settings object
  function settingsDownload()
  var settings = new PHAC01_Settings(m_fwId), rpcResult;
  {
    // Download software info
    rpcResult = rpcCall(EsRpcStdId$$SW_INFO_GET, null);
    if( rpcResult[0] )
      settings.f_swInfo.copyFrom( rpcResult[1] );
    else
      return rpcResult;
    
    rpcResult = rpcCall(PHAC01_Rpid$$AutosaveTmoGet, null);
    if( rpcResult[0] )
      settings.f_autosaveInterval = rpcResult[1];
    else
      return rpcResult;
      
    rpcResult = rpcCall(PHAC01_Rpid$$BgndTmoGet, null);
    if( rpcResult[0] )
      settings.f_bgndExp = rpcResult[1];
    else
      return rpcResult;      
      
    rpcResult = rpcCall(PHAC01_Rpid$$CalibrationClearGet, null);
    if( rpcResult[0] )
      settings.f_calClear.copyFrom( rpcResult[1] );
    else
      return rpcResult;
    
    rpcResult = rpcCall(PHAC01_Rpid$$CalibrationColorGet, null);
    if( rpcResult[0] )
      settings.f_calColor.copyFrom( rpcResult[1] );
    else
      return rpcResult;
    
    rpcResult = [];
    rpcResult += true;
    rpcResult += settings;
    
    return rpcResult;
  }
  
  /// Upload settings object
  function settingsUpload(settings)
  var batch = [], batchItem = [];
  {
    if( settings.f_fwId != m_fwId )
      throw "Could not upload incompatible device settings";
    
    settings.crcUpdate();
    
    batchItem += PHAC01_Rpid$$AutosaveTmoSet;
    batchItem += settings.f_autosaveInterval;
    batch#append(batchItem);
    batchItem = [];
    
    batchItem += PHAC01_Rpid$$BgndTmoSet;
    batchItem += settings.f_bgndExp;
    batch#append(batchItem);
    batchItem = [];
        
    batchItem += PHAC01_Rpid$$CalibrationClearSet;
    batchItem += settings.f_calClear;
    batch#append(batchItem);
    batchItem = [];
    //EsScriptDebug::log("Clear calibration size: %d", settings.f_calClear$size);
    
    batchItem += PHAC01_Rpid$$CalibrationColorSet;
    batchItem += settings.f_calColor;
    batch#append(batchItem);
    batchItem = [];
    
    batch = rpcBatchCall(batch);
    //EsScriptDebug::log(batch);
    
    // We're not interested in returning entire batch result.
    // just treat batch results as a whole.
    if( deviceCheckBatchResultOk(batch) )
    {
      batchItem += true;
      batchItem += null; // nothing is returned
    }
    else
    {
      batchItem += false;
      batchItem += "Device settings upload fail";
    }
    batch = [];
    batch#append(batchItem);
		
    return batch;
  }
  
  /// Properties
  ///
  /// Currently active opmode
  property opmode;
  read: { return m_opMode; }
  
  /// Opmode string
  property opmodeStr;
  read:
  var helper = new PHAC01_DataFlags(m_opMode);
  { 
    return m_opMode;
  }
}
