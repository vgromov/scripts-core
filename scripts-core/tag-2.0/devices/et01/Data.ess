/// ET01 data objects
///

/// Microclimate data object
///
object ET01_Flags
{
	esU32	f_mask;							// flags bit mask
	esU8	f_heaterTimer;			// if heaterTimer == 0xFF - heater is off
															// if heaterTimer > 0 && heaterTimer < 0xFF count of seconds before velocity data is valid
	esU32	f_taAvrTimer;				// if air temperature averaging mode is on - this value in seconds will indicate the value averaging time
	esU32	f_uAvrTime;					// air flow averaging period in seconds 
	
/// Properties
///
	property valid;
	read: { return ET01_Flag$$Invalid != (f_mask & ET01_Flag$$Invalid); }
}

object ET01_DataBlock
{
	esF		f_tA;								// temperature, in C
	esF		f_rH;								// relative humidity in %
	esF		f_tD;								// dewpoint, in C
	esF		f_tW;								// wet thermometer temperature, in C
	esF		f_u;								// air velocity, valid if heaterTimer = 0 and mode id >= LiveUnlimited
	esF		f_tG;								// temperature inside black sphere, valid if sphere is connected
	esF		f_wBgt;							// index WBGT, valid if sphere is connected
	esF		f_wBgts;						// index WBGTs, valid if sphere is connected
	esF		f_tR;								// radiation temperature when airflow is less than 1 m/s
	esF		f_w;								// heat ratiation density
	esF		f_p;								// pressure
	esF		f_t0;								// resulting temperature
	esF		f_reserved[2];
}

object ET01_Data
{
/// Vars
///
	var m_opmode;

/// Fields
///
	esDT				    f_ts;						// timestamp (not used, ET does not have RTC)
	ET01_Flags 			f_flags;				// flags block
	ET01_DataBlock	f_data;					// data block
	esU32					  f_gradient;			// data change tendency indicator
	
/// Non-default ctor with opmode assignment
	new(opmode)
	{
		if( opmode in ET01_OpMode )
			m_opmode = opmode;
		else
			throw "Invalid ET opmode value";
	}
	
/// Properties
///
	property valid;
	read: { return f_flags$valid; }
	// is heater switched off?
	property heaterIsOff;
	read: { return 0xFF == f_flags.f_heaterTimer; }
	// how long (in sec) before heater is ready
	property heaterEta;
	read: { return $heaterIsOff ? 0 : f_flags.f_heaterTimer$value; }
	
/// Data read access
///
	/// Timestamp
	property ts;
	read: { return f_ts$value; }
	/// Timestamp string
	property tsStr;
	read: { return f_ts.asString(); }	
	
	/// Air temperature
	property tA;
    @label = "Air temperature";	
	read: { return f_data.f_tA$value; }
	property tAvalid;
	read: { return !(f_flags.f_mask & ET01_Flag$$No_tA); }
	property tAstrMulti;
    @label = "Air temperature";	
	read: { return ET01_strMultiGet( ET01_valFmt($tA, 1, $tAvalid), c_et01_unitT ); }
	property tAstr;
    @label = "Air temperature";	
	read: { return ET01_fromStrMulti( $tAstrMulti ); }
	
	/// Relative humidity
	property rH;
		@label = "Relative humidity";
	read: { return f_data.f_rH$value; }
	property rHvalid;
	read: { return !(f_flags.f_mask & ET01_Flag$$No_rH); }
	property rHstrMulti;
		@label = "Relative humidity";
	read: { return ET01_strMultiGet( ET01_valFmt($rH, 0, $rHvalid), c_et01_unitH ); }
	property rHstr;
		@label = "Relative humidity";
	read: { return ET01_fromStrMulti( $rHstrMulti ); }
	
	/// Dewpoint temperature
	property tD;
		@label = "Dew point temperature";	
	read: { return f_data.f_tD$value; }
	property tDvalid;
	read: { return !(f_flags.f_mask & ET01_Flag$$No_tD); }
	property tDstrMulti;
		@label = "Dew point temperature";	
	read: { return ET01_strMultiGet( ET01_valFmt($tD, 1, $tDvalid), c_et01_unitT ); }
	property tDstr;
		@label = "Dew point temperature";	
	read: { return ET01_fromStrMulti( $tDstrMulti ); }
	
	/// Wet thermometer temperature
	property tW;
		@label = "Wet thermometer temperature";
	read: { return f_data.f_tW$value; }
	property tWvalid;
	read: { return !(f_flags.f_mask & ET01_Flag$$No_tW); }
	property tWstrMulti;
		@label = "Wet thermometer temperature";
	read: { return ET01_strMultiGet( ET01_valFmt($tW, 1, $tWvalid), c_et01_unitT ); }
	property tWstr;
		@label = "Wet thermometer temperature";
	read: { return ET01_fromStrMulti( $tWstrMulti ); }
	
	/// Air velocity, valid if heaterTimer = 0 and mode id >= LiveUnlimited
	property u;
		@label = "Air flow velocity";
	read: { return f_data.f_u$value; }
	property uvalid;
	read: { return !(f_flags.f_mask & ET01_Flag$$No_u) && 0 == $heaterEta && !m_opmode#isEmpty() && ET01_OpMode$$LiveUnlimited <= m_opmode; }
	property uStrMulti;
		@label = "Air flow velocity";
	read: { return ET01_strMultiGet( ET01_valFmt($u, 2, $uvalid), c_et01_unitU ); }
	property uStr;
		@label = "Air flow velocity";
	read: { return ET01_fromStrMulti( $uStrMulti ); }
	
	/// Temperature inside black globe, valid if sphere is connected
	property tG;
		@label = "Black globe temperature";
	read: { return f_data.f_tG$value; }
	property tGvalid;
	read: { return !(f_flags.f_mask & ET01_Flag$$No_tG); }
	property tGstrMulti;
		@label = "Black globe temperature";
	read: { return ET01_strMultiGet( ET01_valFmt($tG, 1, $tGvalid), c_et01_unitT ); }
	property tGstr;
		@label = "Black globe temperature";
	read: { return ET01_fromStrMulti( $tGstrMulti ); }

	/// Index WBGT, valid if sphere is connected
	property wBgt;
		@label = "Index WBGT";
	read: { return f_data.f_wBgt$value; }
	property wBgtvalid;
	read: { return !(f_flags.f_mask & ET01_Flag$$No_wBgt); }
	property wBgtStrMulti;
		@label = "Index WBGT";
	read: { return ET01_strMultiGet( ET01_valFmt($wBgt, 1, $wBgtvalid), c_et01_unitW ); }
	property wBgtStr;
		@label = "Index WBGT";
	read: { return ET01_fromStrMulti( $wBgtStrMulti ); }

	/// Index WBGTs, valid if sphere is connected
	property wBgts;
		@label = "Index WBGTs";
	read: { return f_data.f_wBgts$value; }
	property wBgtsvalid;
	read: { return !(f_flags.f_mask & ET01_Flag$$No_wBgts); }
	property wBgtsStrMulti;
		@label = "Index WBGTs";	
	read: { return ET01_strMultiGet( ET01_valFmt($wBgts, 1, $wBgtsvalid), c_et01_unitW ); }
	property wBgtsStr;
		@label = "Index WBGTs";	
	read: { return ET01_fromStrMulti( $wBgtsStrMulti ); }	

	// Radiation temperature when airflow is less than 1 m/s
	property tR;
		@label = "Radiation temperature";
	read: { return f_data.f_tR$value; }
	property tRvalid;
	read: { return !(f_flags.f_mask & ET01_Flag$$No_tR); }
	property tRstrMulti;
		@label = "Radiation temperature";
	read: { return ET01_strMultiGet( ET01_valFmt($tR, 1, $tRvalid), c_et01_unitT ); }
	property tRstr;
		@label = "Radiation temperature";
	read: { return ET01_fromStrMulti( $tRstrMulti ); }
	
	/// Heat ratiation density
	property w;
		@label = "Heat ratiation density";
	read: { return f_data.f_w$value; }
	property wvalid;
	read: { return !(f_flags.f_mask & ET01_Flag$$No_w); }
	property wStrMulti;
		@label = "Heat ratiation density";
	read: { return ET01_strMultiGet( ET01_valFmt($w, 1, $wvalid), c_et01_unitW ); }
	property wStr;
		@label = "Heat ratiation density";
	read: { return ET01_fromStrMulti( $wStrMulti ); }

	/// Pressure
	property p;
		@label = "Pressure";
	read: { return f_data.f_p$value; }
	property pvalid;
	read: { return !(f_flags.f_mask & ET01_Flag$$No_p); }
	property pStrMulti;
		@label = "Pressure";
	read: { return ET01_strMultiGet( ET01_valFmt($p, 1, $pvalid), c_et01_unitP ); }
	property pStr;
		@label = "Pressure";
	read: { return ET01_fromStrMulti( $pStrMulti ); }
	
	/// Resulting temperature
	property t0;
		@label = "Resulting temperature";
	read: { return f_data.f_t0$value; }
	property t0valid;
	read: { return !(f_flags.f_mask & ET01_Flag$$No_t0); }
	property t0strMulti;
		@label = "Resulting temperature";
	read: { return ET01_strMultiGet( ET01_valFmt($t0, 1, $t0valid), c_et01_unitT ); }
	property t0str;
		@label = "Resulting temperature";
	read: { return ET01_fromStrMulti( $t0strMulti ); }
}
