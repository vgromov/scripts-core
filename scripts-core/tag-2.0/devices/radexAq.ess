// Scripting device support for pha-01 photo-appliance
##require("EsDeviceBase.ess");
##require("radexAq/Consts.ess");
##require("radexAq/FmtHelpers.ess");
##require("radexAq/Flags.ess");
##require("radexAq/Data.ess");
##require("radexAq/CalibrationAndSettings.ess");

/// RADEX_AQ device object
object RADEX_AQ extends EsDeviceBase
@nomarshal;
{
/// Mandatory base overrides
  function rpcNameGetById(rpcId)
  {
    if( rpcId in RADEX_AQ_Rpid )
      return RADEX_AQ_Rpid.valueLabelGet(rpcId);
    
    return EsDeviceBase::rpcNameGetById(rpcId);
  }
  
  function rpcSigGetById(rpcId)
  {
    if( rpcId in RADEX_AQ_Rpid )
      return rpcSigGet(RADEX_AQ_Rpid.valueLabelGet(rpcId));
    
    return EsDeviceBase::rpcSigGetById(rpcId);
  }
  
  function fwIdAssert(fwId)
  {
    EsDeviceBase::fwIdAssert(fwId);
    fwIdValidate(
      fwId, 
      EsQuartaDeviceType$$RADEXAQ, 
      "RADEX_AQ"
    );
  }

  function fwIdDefaultSet()
  {
    m_fwId = new EsFirmwareId(EsQuartaDeviceType$$RADEXAQ);
    m_fwId.f_serial.f_year = EsDateTime::now()$year;
    m_fwId.f_fwVer.f_major = 1;
    m_fwId.f_fwVer.f_minor = 0;
  }
  
  function defaultCapsGet()
  var result = EsDeviceBase::defaultCapsGet() + RADEX_AQ_Rpid$values;
  {
    result += EsRpcStdId$$HEALTH_INFO_GET;
    result += EsRpcStdId$$DATETIME_GET;
    result += EsRpcStdId$$DATETIME_SET;
    result += EsRpcStdId$$SHUTDOWN;
    result += EsRpcStdId$$ENTER_BOOT;
    result += EsRpcStdId$$POWER_STATUS_GET;
    result += EsRpcStdId$$SW_INFO_GET;
    
    return result;
  }
  
  function rpcCallResultHandle(rpcId, rpcArgs, rpcResult)
  var result = null;
  {
    switch( rpcId )
    {
    case EsRpcStdId$$HEALTH_INFO_GET:
      result = new RADEX_AQ_Health(rpcResult);    // use RADEX_AQ health implementation instead of unparsed standard one
    case RADEX_AQ_Rpid$$DataCountGet:
      result = rpcResult;
    case RADEX_AQ_Rpid$$LiveDataGet:
      {
        result = new RADEX_AQ_LiveData(); 
        result$buffer = rpcResult#asBinBuffer();
      }
    case RADEX_AQ_Rpid$$DataAtIdxGet:
      {
        result = new RADEX_AQ_PersistentData();
        result$buffer = rpcResult#asBinBuffer();
      }
    default: 
      result = EsDeviceBase::rpcCallResultHandle(
        rpcId, 
        rpcArgs, 
        rpcResult
      );
    }
    
    return result;
  }
  
  /// Constructors
  new()
  {
    internalInit(null);    
  }
  
  new(fwId)
  {
    internalInit(fwId);
  }
  
  /// RADEX_AQ custom response handlers
  ///
  /// Download settings object
  function settingsDownload()
  var settings = new RADEX_AQ_Settings(m_fwId), rpcResult;
  {
    // Download software info
    rpcResult = rpcCall(EsRpcStdId$$SW_INFO_GET, null);
    if( rpcResult[0] )
      settings.f_swInfo.copyFrom( rpcResult[1] );
    else
      return rpcResult;
    
    rpcResult = rpcCall(RADEX_AQ_Rpid$$SettingsGet, null);
    if( rpcResult[0] )
      settings.f_cfg.copyFrom( rpcResult[1] );
    else
      return rpcResult;

    rpcResult = [];
    rpcResult += true;
    rpcResult += settings;
    
    return rpcResult;
  }
  
  /// Upload settings object
  function settingsUpload(settings)
  {
    if( settings.f_fwId != m_fwId )
      throw "Could not upload incompatible device settings";

    return rpcCall(
      RADEX_AQ_Rpid$$SettingsSet,
      settings.f_cfg
    );  
  }
  
}