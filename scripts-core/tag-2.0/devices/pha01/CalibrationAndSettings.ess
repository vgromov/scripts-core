/// PHA01 calibration, linearization, and settings objects
///
##require("../../math.ess");

const c_PHA01_zeroNode              = [0., 0.];
const c_PHA01_identityNode          = [1., 0.];
const c_LUXCDM_CAL_NODES_CNT        = 4;
const c_KP_CAL_NODES_CNT            = 2;
const c_LUXCDM_CAL_NODES_CNT_POLY   = 5;
const c_KP_CAL_NODES_CNT_POLY       = 3;
const c_PHA01_MAX_LUXCDM            = 200000.;
const c_PHA01_MAX_KP                = 1000.;

/// Calibration node
object PHA01_CalNode
{
  esF f_1;
  esF f_2;
  
  function countGet()
  {
    return 2;
  }
  
  function itemGet(idx)
  {
    if(0 == idx)
      return f_1$value;
    else if(1 == idx)
      return f_2$value;
    else  
      throw "Index is out of bounds";  
  }

  function itemSet(idx, val)
  {
    if(0 == idx)
      f_1 = val;
    else if(1 == idx)
      f_2 = val;
    else  
      throw "Index is out of bounds";  
  }
  
  property notEmpty;
  read: { return f_1 != 0. || f_2 != 0.; }
  
  property greaterThanEps;
  read: { return f_1 > c_math_FLT_EPSILON && f_2 > c_math_FLT_EPSILON; }
}

// Polylines helper objects
object PHA01_CalibrationPolylines
{
  PHA01_CalNode f_lux[c_LUXCDM_CAL_NODES_CNT_POLY];
  PHA01_CalNode f_cdm[c_LUXCDM_CAL_NODES_CNT_POLY];
  PHA01_CalNode f_kp[c_KP_CAL_NODES_CNT_POLY];
}

/// All calibration info
object PHA01_Calibration
{
  var m_polylines,
    m_calculatedPoly;

  PHA01_CalNode f_lux[c_LUXCDM_CAL_NODES_CNT];
  PHA01_CalNode f_cdm[c_LUXCDM_CAL_NODES_CNT];
  PHA01_CalNode f_kp[c_KP_CAL_NODES_CNT];
  
  new()
  {
    m_polylines = new PHA01_CalibrationPolylines();
    m_calculatedPoly = false;
  }
  
  function calTypeCheck(type)
  {
    if( !(type in PHA01_CalType) )
      throw "Calibration type value is out of range";  
  }
  
  function calGetByType(type)
  {
    calTypeCheck(type);
    
    if( PHA01_CalType$$Lux == type )
      return f_lux;
    else if( PHA01_CalType$$Cdm == type )
      return f_cdm;
    else if( PHA01_CalType$$Kp == type )
      return f_kp;
  }
  
  function polyGetByType(type)
  {
    calTypeCheck(type);

    if( PHA01_CalType$$Lux == type )
      return m_polylines.f_lux;
    else if( PHA01_CalType$$Cdm == type )
      return m_polylines.f_cdm;
    else if( PHA01_CalType$$Kp == type )
      return m_polylines.f_kp;
  }
  
  function checkEmpty(type)
  var node, nodes;
  {
    calTypeCheck(type);

    if( PHA01_CalType$$Lux == type )
      nodes = f_lux;
    else if( PHA01_CalType$$Cdm == type )
      nodes = f_cdm;
    else if( PHA01_CalType$$Kp == type )
      nodes = f_kp;
    else
      return checkEmpty(PHA01_CalType$$Lux) &&
        checkEmpty(PHA01_CalType$$Cdm) &&
        checkEmpty(PHA01_CalType$$Kp);
      
    foreach( node in nodes )
    {
      if( node$notEmpty )
        return false;
    }
      
    return true;
  }
  
  function lineCoeffsCalc(node0, node1, coeffs)
  {
    coeffs[0] = (node1[1] - node0[1]) / (node1[0] - node0[0]);
    coeffs[1] = node0[1] - coeffs[0] * node0[0];
  }
  
  // reset calibration polyline
  function internalResetCalibrationPolyline(type)
  var idx, calDest = polyGetByType(type),
      cnt = (type < PHA01_CalType$$Kp) ? c_KP_CAL_NODES_CNT_POLY : c_KP_CAL_NODES_CNT_POLY;
  {
    for( idx = 0; idx < cnt; ++idx )
    {
      calDest[idx][0] = c_PHA01_identityNode[0];
      calDest[idx][1] = c_PHA01_identityNode[1];
    }
    
    EsScriptDebug::log("Polyline reset for %s", PHA01_CalType.valueLabelGet(type));    
  }  
  
  function internalRecalcCalibrationPolyline(type)
  var idx, destIdx = 0, srcCnt = 
    (type < PHA01_CalType$$Kp) ? 
      c_LUXCDM_CAL_NODES_CNT : 
      c_KP_CAL_NODES_CNT;
  var node, prevNode = c_PHA01_zeroNode, calSrc, calDest;
  {
    if( !checkEmpty(type) )
    {
      EsScriptDebug::log("Calculating polyline for %s", PHA01_CalType.valueLabelGet(type));
      
      calSrc = calGetByType(type);
      calDest = polyGetByType(type);
      
      // 1) find non-empty source node slot
      // 2) calc all polyline parts between previous slot and this one
      for( idx = 0; idx < srcCnt; ++idx )
      {
        node = calSrc[idx];

        EsScriptDebug::log("Slot %d check", idx);      

        if( node$greaterThanEps )
        {
          EsScriptDebug::log("Slot %d is non empty", idx);      
          
          for( ; destIdx <= idx; ++destIdx )
          {
            EsScriptDebug::log("Calculating coeffs for slot %d", destIdx);      
            lineCoeffsCalc( prevNode, node, calDest[destIdx] );
          }
          
          prevNode = node;
        }  
      }
      
      // calc the rest of polyline part(s)
      for( ; destIdx < srcCnt+1; ++destIdx )
      {
        EsScriptDebug::log("Calculating the rest coeffs for slot %d", destIdx); 
        lineCoeffsCalc( c_PHA01_zeroNode, prevNode, calDest[destIdx] );
      }

      EsScriptDebug::log("Polyline calculated for %s", PHA01_CalType.valueLabelGet(type));
    }
    else
      internalResetCalibrationPolyline(type);
  }

  function calibrationPolylineRecalc(type)
  {
    if( PHA01_CalType$$All == type )
    {
      internalRecalcCalibrationPolyline(PHA01_CalType$$Lux);
      internalRecalcCalibrationPolyline(PHA01_CalType$$Cdm);
      internalRecalcCalibrationPolyline(PHA01_CalType$$Kp);
    }
    else
      internalRecalcCalibrationPolyline(type);
  }

  function calibratedValueCalculate(type, val)
  var calPoly = polyGetByType(type),
    calSrc = calGetByType(type),
    slotCnt = (type < PHA01_CalType$$Kp) ? c_LUXCDM_CAL_NODES_CNT : c_KP_CAL_NODES_CNT,
    slot = 0,
    polyNode;
  {    
    if( type > PHA01_CalType$$Kp )
      return 0.;

    EsScriptDebug::log("Calculating calibrated value for '%s'", PHA01_CalType.valueLabelGet(type));      
      
    if( !m_calculatedPoly )
    {
      calibrationPolylineRecalc(PHA01_CalType$$All);
      m_calculatedPoly = true;
    }
    
    // find slot for which to perform calibration calculation    
    if( !checkEmpty(type) )
    {
      while( val > calSrc[slot].f_1 && slot < slotCnt )
        ++slot;
      
      polyNode = calPoly[slot];
      val = polyNode.f_1 * val + polyNode.f_2;
    }
    
    // restrict returned value
    if( type < PHA01_CalType$$Kp )
    {
      if( val > c_PHA01_MAX_LUXCDM )
        val = c_PHA01_MAX_LUXCDM;
    }
    else if( val > c_PHA01_MAX_KP )
      val = c_PHA01_MAX_KP;

    EsScriptDebug::log("Calibrated value for %s calculated", PHA01_CalType.valueLabelGet(type));      
     
    return val;
  }  
}

// linearization coeffs, for firmware newer than or equal to 1.4
object PHA01_LinNodeLow
{  
  PHA01_CalNode f_node;
  esU16 f_adcRangeMax;
}

object PHA01_Linearization 
{
  PHA01_LinNodeLow f_low[6];
  PHA01_CalNode f_high;
}

// ranges hysteresis thresholds
object PHA01_Hysteresis
{
  esU16 f_loHi;
  esU16 f_hiLo;
}

object PHA01_Health
{
  esU32 f_errors;
  /// Constructor
  new(health)
  {
    f_errors = health;
  }
  /// Return health errors as string collection
  function errorsAsStrings()
  var result = []; 
  {
    if(f_errors & PHA01_Error$$Batt)
      result += PHA01_Error$$Batt$$label;
    if(f_errors & PHA01_Error$$I2c)
      result += PHA01_Error$$I2c$$label;
    if(f_errors & PHA01_Error$$Spi)
      result += PHA01_Error$$Spi$$label;
    if(f_errors & PHA01_Error$$RTC)
      result += PHA01_Error$$RTC$$label;
    if(f_errors & PHA01_Error$$RTCDateTime)
      result += PHA01_Error$$RTCDateTime$$label;
    if(f_errors & PHA01_Error$$Storage)
      result += PHA01_Error$$Storage$$label;
    if(f_errors & PHA01_Error$$StorageData)
      result += PHA01_Error$$StorageData$$label;
    if(f_errors & PHA01_Error$$StorageSystem)
      result += PHA01_Error$$StorageSystem$$label;
    if(f_errors & PHA01_Error$$Calibration)
      result += PHA01_Error$$Calibration$$label;
    if(f_errors & PHA01_Error$$Linearization)
      result += PHA01_Error$$Linearization$$label;
  
    return result;
  }
  /// Return health errors as string
  function asString()
  {
    return EsStr::fromArray(errorsAsStrings(), "; ", "", "");
  }
  
  /// Properties
  ///
  property errors;
  read: { return f_errors$value; }
  /// return true if health critical error was latched
  property hasCriticalError;
  read: { return f_errors & 
                                (  PHA01_Error$$I2c|
                                  PHA01_Error$$Spi|
                                  PHA01_Error$$RTC|
                                  PHA01_Error$$Storage); 
        }
  /// return true if health non-critical error was latched
  property hasNonCriticalError;
  read: { return f_errors & 
                                (  PHA01_Error$$RTCDateTime|
                                  PHA01_Error$$StorageData|
                                  PHA01_Error$$StorageSystem|
                                  PHA01_Error$$Calibration|
                                  PHA01_Error$$Linearization);        
        }
  // Return true if error flags contain warnings      
  property hasWarning;
  read: { return f_errors & PHA01_Error$$Batt; }
  /// return true if any health error was latched
  property hasError;
  read: { return f_errors != 0;  }
  /// return errors as string collection
  property errorStrings;
  read: { return errorsAsStrings(); }
}

/// pha01 device settings
object PHA01_Settings
{
  // settings block
  EsFirmwareId f_fwId;
  
  if( f_fwId$ver > "1.5" )
    EsSoftwareInfo f_swInfo;
  
  if( f_fwId$ver > "1.1" )
    PHA01_Hysteresis f_hys;

  esU8 f_autosaveInterval;
    @default = PHA01_Defs$$AutoIntervalDef;
    @restriction = [PHA01_Defs$$AutoIntervalMin..PHA01_Defs$$AutoIntervalMax];
  // linearization data
  PHA01_Linearization f_lin;
  // calibration data
  PHA01_Calibration f_cal;    
  
  /// Constructor
  new(fwId)
  {
    fwIdValidate(fwId, [EsDeviceType$$ECOL1, EsTenzorDeviceType$$TECOL1], "PHA01 settings");
    f_fwId.copyFrom(fwId);
  }
  
  function calibratedClearValueCalculate(type, val)
  {
    return f_cal.calibratedValueCalculate(type, val);
  }  
}
