/// EL3C Calibration and settings data blocks
///
##require("calibration/Consts.ess");
##require("calibration/Pre.1.5.ess");

function el3cClearCalibrationTypeCheck(type)
{
  if( !(type in [EL3C_CalibrationType$$Illuminance .. EL3C_CalibrationType$$Pulsation]) )
    throw "Analog calibration type is out of bounds";
}

/// Analog calibration data
object EL3C_CalibrationAnl
{
  EsSpline f_csIllum;    ///< Clear illuminance calibration
  EsSpline f_csLum;      ///< Clear luminance calibration
  EsSpline f_csKp;       ///< Clear pulsation calibration  
  
  // We should have separate initialization 
  // method to work-around cases, when this object is used as filed
  // in other compound object(s), and default ctors are not being called for fields
  // 
  function init()
  {
    f_csIllum$maxLen = 8;
    f_csLum$maxLen = 8;
    f_csKp$maxLen = 8;
  }
  
  /// Default constructor
  new()
  {
    init();
  }  
  
  /// Update all crc blocks if needed
  function crcUpdate()
  {
    f_csIllum.crcUpdate();
    f_csLum.crcUpdate();
    f_csKp.crcUpdate();
  }
  
  /// Properties
  ///
  
  /// Return true if all blocks have valid crc
  property crcIsOk;
  read: { return f_csIllum$crcIsOk && f_csLum$crcIsOk && f_csKp$crcIsOk; }
  
  /// Overall validity check
  property valid;
  read: { return f_csIllum$valid && f_csLum$valid && f_csKp$valid; }
  
  /// Illuminance calibration access
  property calIlluminance;
  read: { return f_csIllum; }
  
  /// Luminance calibration access
  property calLuminance;
  read: { return f_csLum; }
  
  /// Pulsation calibration
  property calPulsation;
  read: { return f_csKp; }
}

/// Digital calibration data
object EL3C_CalibrationDig
{
  EsSpline f_illum;         ///< Digital channel illuminance calibration
  EsSpline f_lum;           ///< Digital channel luminance calibration
  
  // We should have separate initialization 
  // method to work-around cases, when this object is used as filed
  // in other compound object(s), and default ctors are not being called for fields
  // 
  function init()
  {
    f_illum$maxLen = 8;
    f_lum$maxLen = 8;
  }  
  
  /// Default constructor
  new()
  {
    init();
  }
  
  /// Update CRC of all blocks, if needed
  function crcUpdate()
  {
    f_illum.crcUpdate();
    f_lum.crcUpdate();
  }
 
  /// Properties
  ///
  
  /// Return true if all blocks have valid crc
  property crcIsOk;
  read: 
  { 
    return f_illum$crcIsOk && f_lum$crcIsOk;
  }
  
  /// Overall validity check
  property valid;
  read: { return f_illum$valid && f_lum$valid; }
  
  /// Illuminance calibration access
  property calIlluminance;
  read: { return f_illum; }
  
  /// Luminance calibration access
  property calLuminance;
  read: { return f_lum; }
}

/// EL3C device settings
object EL3C_Settings
{
  var m_prevType;
  
  // settings block
  EsFirmwareId f_fwId;
  EsSoftwareInfo f_swInfo;
  
  esU16 f_autosaveInterval;
    @default = EL3C_Defs$$AutoIntervalDef;
    @restriction = [EL3C_Defs$$AutoIntervalMin..EL3C_Defs$$AutoIntervalMax];
  
  esU16 f_bgndExp;
    @default = EL3C_Defs$$BgndExposureDef;
    @restriction = [EL3C_Defs$$BgndExposureMin..EL3C_Defs$$BgndExposureMax];

  if( f_fwId$ver < "1.5" )
  {
    var m_calClear,
      m_calColor;  
  
    // Clear calibration data
    EL3C_CalibrationClear f_calClear;    
    
    // Color calibration data
    EL3C_CalibrationColor f_calColor;
    
    function calInit()
    {
      f_calClear.init();
      f_calColor.init();
    }
    
    // Return clear clibration spline by data type
    function calClearGet(type)
    {
      el3cClearCalibrationTypeCheck(type);
      if( EL3C_CalibrationType$$Illuminance == type )
        return f_calClear$calIlluminance;
      else if( EL3C_CalibrationType$$Luminance == type )  
        return f_calClear$calLuminance;
      else if( EL3C_CalibrationType$$Pulsation == type ) 
        return f_calClear$calPulsation;
    }
    
    function calAnlGet(type)
    {
      return calClearGet(type);
    }

    // Return clear calibration splines for color sensor
    function calColorClearGet(type)
    {
      el3cClearCalibrationTypeCheck(type);
      if( EL3C_CalibrationType$$Illuminance == type )
        return f_calColor$calIlluminance;
      else if( EL3C_CalibrationType$$Luminance == type )  
        return f_calColor$calLuminance;
    }
    
    function calDigGet(type)
    {
      return calColorClearGet(type);
    }
    
    function calCacheClear(type)
    {
      if( m_prevType != type )
      {
        m_prevType = type;
        m_calClear = calClearGet(type);
        m_calColor = calColorClearGet(type);
      }
    }
    
    /// Calculate calibrated value
    function calibratedClearValueCalculate(type, val)
    { 
      calCacheClear(type);
      return m_calClear.calculate(val);
    }
    
    function calAnlValCalculate(type, val)
    {
      return calibratedClearValueCalculate(type, val);
    }
    
    function calibratedColorClearValueCalculate(type, val)
    { 
      calCacheClear(type);
      return m_calColor.calculate(val);
    }
    
    function calDigValCalculate(type, val)
    {
      return calibratedColorClearValueCalculate(type, val);
    }
    
    /// Update CRC data in clear and color calibrations
    function crcUpdate()
    {
      f_calClear.crcUpdate();
      f_calColor.crcUpdate();
    }
    
    property calClear;
    read: { return f_calClear; }

    property calAnl;
    read: { return $calClear; }
    
    property calColor;
    read: { return f_calColor; }
    
    property calDig;
    read: { return $calColor; }

    property crcIsOk;
    read: { return f_calClear$crcIsOk && f_calColor$crcIsOk; }
  }
  else
  {
    var m_calAnl,
      m_calDig;  

      // Clear calibration data
    EL3C_CalibrationAnl f_calAnl;    
    
    // Color calibration data
    EL3C_CalibrationDig f_calDig;    

    function calInit()
    {
      f_calAnl.init();
      f_calDig.init();
    }
    
    // Return analog clibration spline by data type
    function calAnlGet(type)
    {
      el3cClearCalibrationTypeCheck(type);
      if( EL3C_CalibrationType$$Illuminance == type )
        return f_calAnl$calIlluminance;
      else if( EL3C_CalibrationType$$Luminance == type )  
        return f_calAnl$calLuminance;
      else if( EL3C_CalibrationType$$Pulsation == type ) 
        return f_calAnl$calPulsation;
    }

    // Return clear calibration splines for color sensor
    function calDigGet(type)
    {
      el3cClearCalibrationTypeCheck(type);
      if( EL3C_CalibrationType$$Illuminance == type )
        return f_calDig$calIlluminance;
      else if( EL3C_CalibrationType$$Luminance == type )  
        return f_calDig$calLuminance;
    }
    
    function calCacheClear(type)
    {
      if( m_prevType != type )
      {
        m_prevType = type;
        m_calAnl = calAnlGet(type);
        m_calDig = calDigGet(type);
      }
    }
    
    /// Calculate calibrated value
    function calAnlValCalculate(type, val)
    { 
      calCacheClear(type);
      return m_calAnl.calculate(val);
    }
    
    function calDigValCalculate(type, val)
    { 
      calCacheClear(type);
      return m_calDig.calculate(val);
    }
    
    /// Update CRC data in clear and color calibrations
    function crcUpdate()
    {
      f_calAnl.crcUpdate();
      f_calDig.crcUpdate();
    }
    
    property calAnl;
    read: { return f_calAnl; }
    
    property calDig;
    read: { return f_calDig; }

    property crcIsOk;
    read: { return f_calAnl$crcIsOk && f_calDig$crcIsOk; }    
  }
  
  if( f_fwId$ver > "1.0" )
  {
    property countryCode;
    read: { return f_swInfo$fwInfo$countryCode; }
  }  
  
  /// Constructors
  new()
  {
    f_fwId.copyFrom( new EsFirmwareId(EsDeviceType$$EL3C) );
    call(
      "calInit"
    );
  }
  
  new(fwId)
  {
    fwIdValidate(fwId, EsDeviceType$$EL3C, "EL3C settings");
    f_fwId.copyFrom(fwId);
    call(
      "calInit"
    );
  }
  
  /// Propertires
  ///
  property devType;
  read: { return f_fwId$devType; }
  
  property fwId;
  read: { return f_fwId.clone(); }
  
  property swInfo;
  read: { return f_swInfo.clone(); }
 
  property autosaveInterval;
  read: { return f_autosaveInterval$value; }
  write: { f_autosaveInterval = __value; }
  
  property bgndExposure;
  read: { return f_bgndExp$value; }
  write: { f_bgndExp = __value; }
}
