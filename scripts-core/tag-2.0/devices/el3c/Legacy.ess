/// EL3C Backwards - compatible (legacy) data structures
///

/// Simple EL3C data object
object EL3C_LegacyData 
{
  /// Fields
  esDT   f_ts;
  esF    f_lux;
  esF    f_cdm;
  esU16  f_kp;
  esI8   f_temp;
  
  /// Properties
  ///
  /// Timestamp
  property ts;
  read: { return f_ts$value; }
  /// Timestamp string
  property tsStr;
  read: { return f_ts.asString(); }
  
  /// illuminosity
  property lux;
  read: { return f_lux$value; }
  /// illuminosity string components property
  property luxStrMulti;
  read: { return EL3C_strMultiGet( $lux, c_el3c_unitE, true); }
  /// illuminosity value string
  property luxStr;
  read: { return EL3C_fromStrMulti( $luxStrMulti ); }
  
  /// Luminosity
  property cdm;
  read: { return f_cdm$value; }
  /// Luminosity string components
  property cdmStrMulti;
  read: { return EL3C_strMultiGet( $cdm, c_el3c_unitL, true); }
  /// Luminosity value string
  property cdmStr;
  read: { return EL3C_fromStrMulti( $cdmStrMulti ); }
  
  /// pulsation coefficient, in %
  property kp;
  read: { return f_kp / 10.; }
  /// pulsation string components
  property kpStrMulti;
  read: {  return EL3C_strMultiNoMulPartGet( $kp, c_el3c_unitP, true); }
  /// pulsation string
  property kpStr;
  read: { return EL3C_fromStrMultiNoMulPart( $kpStrMulti ); }
}

// background subtraction data packet
object EL3C_LegacyDataWoBgnd
{
  esDT    f_ts;
  esF     f_luxOrg;         /// > original illuminosity
  esF     f_luxBgnd;        /// > measured background illuminosity
  esF     f_lux;            /// > illuminosity-bgnd level
  esU16   f_kpOrg;          /// > original pulsation
  esU16   f_kp;             /// > resulting pulsation
  esU16   f_bgndDuration;   /// > duration of background measurements in seconds
  esU16   f_bgndETA;        /// > bgnd measurement countdown in seconds, 0 - bgnd measurement results are valid
 
  /// Properties
  ///
  /// Timestamp
  property ts;
  read: { return f_ts$value; }
  /// Timestamp string
  property tsStr;
  read: { return f_ts.asString(); }  
 
   /// Data validity check
  property valid;
  read: { return 0 == f_bgndETA; }
 
  /// original illuminosity
  property luxOrg;
  read: { return f_luxOrg$value; }
  /// original illuminosity string components
  property luxOrgStrMulti;
  read: { return EL3C_strMultiGet( $luxOrg, c_el3c_unitE, $valid); }
  /// original illuminosity string
  property luxOrgStr;
  read: { return EL3C_fromStrMulti( $luxOrgStrMulti ); }  

  /// background illuminosity
  property luxBgnd;
  read: { return f_luxBgnd$value; }
  /// background illuminosity  string components
  property luxBgndStrMulti;
  read: { return EL3C_strMultiGet( $luxBgnd, c_el3c_unitE, $valid); }
  /// background illuminosity  string
  property luxBgndStr;
  read: { return EL3C_fromStrMulti( $luxBgndStrMulti ); }  

  /// illuminosity W|O background
  property lux;
  read: { return f_lux$value; }
  /// illuminosity W|O background, string components
  property luxStrMulti;
  read: { return EL3C_strMultiGet( $lux, c_el3c_unitE, $valid); }
  /// illuminosity W|O background, string
  property luxStr;
  read: { return EL3C_fromStrMulti( $luxStrMulti ); }

  /// original pulsation coefficient, %
  property kpOrg;
  read: { return f_kpOrg / 10.; }
  property kpOrgStrMulti;
  read: { return EL3C_strMultiNoMulPartGet( $kpOrg, c_el3c_unitP, $valid ); }
  property kpOrgStr;
  read: { return EL3C_fromStrMultiNoMulPart( $kpOrgStrMulti ); }

  /// resulting pulsation coefficient, %
  property kp;
  read: { return f_kp / 10.; }
  /// pulsation multi string
  property kpStrMulti;
  read: { return EL3C_strMultiNoMulPartGet( $kp, c_el3c_unitP, $valid ); }
  /// pulsation string
  property kpStr;
  read: { return EL3C_fromStrMultiNoMulPart( $kpStrMulti ); }
  
  /// Background exposure duration in seconds
  property bgndExp;
  read: { return f_bgndDuration$value; }
  
  /// Bgnd ETA read access
  property eta;
  read: { return f_bgndETA$value; }
}

// Legacy calibration data. For compatibility only!
// NB!!!! No real calibration data is received on response to this request
// from EL3C, just identity calibration stubs got passed in response.
//
/// Calibration node
object EL3C_LegacyCalibrationNode
{
  esF f_1;
  esF f_2;
}

/// All calibration info
object EL3C_LegacyCalibrationData
{
  EL3C_LegacyCalibrationNode f_lux[4];
  EL3C_LegacyCalibrationNode f_cdm[4];
  EL3C_LegacyCalibrationNode f_kp[2];
}
