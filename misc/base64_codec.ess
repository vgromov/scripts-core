// BASE64 Codec
//

const sc_base64_map = B"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";

function base64_encoded_len_get(plain_len)
{
  return (plain_len * 4) / 3 + 4;
}

function base64_plain_len_get(encoded_len)
{
  return (encoded_len * 3) / 4;
}

// Returned is encoded buffer
function base64_encode_buff(inbuff, zeropad)
var counts = 0, buffer = B"\0\0\0",
  expected_len = base64_encoded_len_get( inbuff#countGet() ),
  result, encodedCnt = 0, i;
{
  if( zeropad )
    ++expected_len;

  result = EsVar::as( EsVariantType$$VAR_BIN_BUFFER, expected_len );

  for( i = 0; i < inbuff#countGet(); ++i ) 
  {
    buffer[counts++] = inbuff[i];
    if( counts == 3 ) 
    {
      result[encodedCnt++] = sc_base64_map[ buffer[0] >> 2 ];
      result[encodedCnt++] = sc_base64_map[((buffer[0] & 0x03) << 4) + (buffer[1] >> 4)];
      result[encodedCnt++] = sc_base64_map[((buffer[1] & 0x0f) << 2) + (buffer[2] >> 6)];
      result[encodedCnt++] = sc_base64_map[buffer[2] & 0x3f];
      counts = 0;
    }
  }

  if( counts > 0 ) 
  {
    result[encodedCnt++] = sc_base64_map[buffer[0] >> 2];
    if( counts == 1 ) 
    {
      result[encodedCnt++] = sc_base64_map[(buffer[0] & 0x03) << 4];
      result[encodedCnt++] = B'=';
    }
    else                      // if counts == 2
    {
      result[encodedCnt++] = sc_base64_map[((buffer[0] & 0x03) << 4) + (buffer[1] >> 4)];
      result[encodedCnt++] = sc_base64_map[(buffer[1] & 0x0f) << 2];
    }

    result[encodedCnt++] = B'=';
  }

  if(zeropad)
    result[encodedCnt++] = B'\0';   /* string padding character */
  
  // Trim result
  result#countSet( encodedCnt );

  return result;
}

function base64_decode_buff(inbuff, zeropad)
var result, counts = 0, buffer = B"\0\0\0\0",
  expected_len = base64_plain_len_get( inbuff#countGet() ),
  decodedCnt = 0, i, k;
{
  if( zeropad )
    ++expected_len;

  result = EsVar::as( EsVariantType$$VAR_BIN_BUFFER, expected_len );

  for( i = 0; i < inbuff#countGet(); ++i )
  {
    for( k = 0; k < 64 && sc_base64_map[k] != inbuff[i]; ++k );
      buffer[counts++] = k;

    if( counts == 4 )
    {
      result[decodedCnt++] = (buffer[0] << 2) + (buffer[1] >> 4);

      if( buffer[2] != 64 )
        result[decodedCnt++] = (buffer[1] << 4) + (buffer[2] >> 2);

      if( buffer[3] != 64 )
        result[decodedCnt++] = (buffer[2] << 6) + buffer[3];

      counts = 0;
    }
  }

  if( zeropad )
    result[decodedCnt++] = B'\0';    /* string padding character */
  
  // Trim result
  result#countSet( decodedCnt );

  return result;
}
