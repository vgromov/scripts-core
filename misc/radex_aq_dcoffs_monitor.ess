##require("../core.ess");
##require("../math/EsSpline.ess");
##require("../misc/io_monitors.ess");
##require("../devices/radexAq.ess");

// DC offset / Continuous Raw data monitor for Radex AQ devices

const c_opRetries = 4;

// Connect AQ device located on specfic devpath
function aqDeviceConnect( devpath )
var dev, chnl = new EsChannelIoUart(), 
  protomon, master = new EsRpcMaster();
{
  // Uncomment to use channel debug monitor helper
  //chnl$monitor = new ChnlIoMonitor();

  chnl$port = devpath;
  chnl$baud = 921600;

  // Uncomment to use protocol debug monitor helper
  /*
  protomon = new ProtoIoMonitor();
  protomon$customRpids = RADEX_AQ_Rpid;
  master$monitor = protomon;
  */

  master$channel = chnl;
  master$packetTimeout = 4000;
  master.activate();

  dev = new RADEX_AQ(
    deviceKnownCapsFwIdRead(
      master,
      master.getImplementedRPCs()
    )
  );

  dev$ioMaster = master;

  return dev;
}

// Enumerate all connected AQ devices
//
function allAqDevicesConnect()
var tmp, comms = EsChannelIoUart::enumerate(
    false,  //< Skip Busy ports
    true    //< USB bus only
  ),
  dev, devs = [], devpaths = [];
{
  if( !comms#countGet() )
    throw "Could not find any non-busy USB ports";

  foreach( tmp in comms )
  {
    // Extract the first match found
    if( !tmp[2]#find("RADEX-AQ")#isEmpty() )
      devpaths += tmp[0]; //< Now we have full UART device path
  }

  if( 0 == devpaths#countGet() )
    throw "Could not find RADEX-AQ USB ports";

  foreach( tmp in devpaths )
  {
    dev = aqDeviceConnect( tmp );
    if( !dev#isEmpty() )
    {
      devs += dev;

      EsScriptDebug::log(
        "Connected %s",
        dev$fwIdStringEssential
      );
    }
  }

  return devs;
}

function aqContinuousMsrStart(dev)
var rpcResult, retries = c_opRetries;
{
  do
  {
    rpcResult = dev.rpcCall( 
      RADEX_AQ_Rpid$$ContMeasurementsStart,
      true
    );

    --retries;

  } while( 
    !rpcResult[0] &&
    0 < retries
  );

  if( 0 == retries )
    throw EsStr::format(
      "Could not initiate measurement in %s, retries expired",
      dev$fwIdStringEssential
    );

  EsScriptDebug::log(
    "Initiated measurements for %s",
    dev$fwIdStringEssential
  );
}

function aqContinuousMsrStop(dev)
var rpcResult, retries = c_opRetries;
{
  do
  {
    rpcResult = dev.rpcCall( 
      RADEX_AQ_Rpid$$ContMeasurementsStart,
      false
    );

    --retries;

  } while( 
    !rpcResult[0] &&
    0 < retries
  );

  if( 0 == retries )
    throw EsStr::format(
      "Could not exit continuous measurements in %s, retries expired",
      dev$fwIdStringEssential
    );

  EsScriptDebug::log(
    "Stoppend continuous measurements for %s",
    dev$fwIdStringEssential
  );
}

// Read Raw data from device, with retries
function aqDataRead(dev)
var rpcResult, retries = c_opRetries;
{
  do
  {
    rpcResult = dev.rpcCall( 
      RADEX_AQ_Rpid$$LiveDataGetRaw,
      null
    );

    --retries;

  } while( 
    !rpcResult[0] &&
    0 < retries
  );

  if( 0 == retries )
    throw EsStr::format(
      "Could not read results in %s, retries expired",
      dev$fwIdStringEssential
    );

  EsScriptDebug::log(
    "Raw Data[%s]: dust=%d, cnt=%d, longCnt=%d",
    dev$fwIdStringEssential,
    rpcResult[1].f_dust,
    rpcResult[1].f_dustStatCnt,
    rpcResult[1].f_dustLongStatCnt
  );
}

// Process AQ calibration msr, reading, saving
//
function aqMsrInitialize(devs)
var dev;
{
  foreach( dev in devs )
    aqContinuousMsrStart(dev);

  EsThreadWorker::sleep(5000);
}

function aqMsrUninitialize(devs)
var dev;
{
  foreach( dev in devs )
    aqContinuousMsrStop(dev);
}

function aqDevicesDataRead(devs)
var dev;
{
  foreach( dev in devs )
  {
    aqDataRead(
      dev
    );
  }

  EsThreadWorker::sleep(1000);
}

////////////////////////////////////////////////////////////////
// Main code:
//

var devs = allAqDevicesConnect();

EsThreadWorker::sleep(1000);

// Initialize measurements
aqMsrInitialize(
  devs
);

// Execute the following loop
while( !__scriptHost$aborting )
{
  aqDevicesDataRead(
    devs
  );
}

aqMsrUninitialize(
  devs
);
