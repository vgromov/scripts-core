// prepare firmware hex image for
// compiled-in usage in firmware programmer module
// extract user application part from binary and save it as script file
//
##require("esFwBinary.ess");

function extract(inFile, outFile, userAppOffset, crcInit)
var hex, binary, inf, of, fp, cwd = EsPath::cwdGet(), hdrAndApp;
{
  // Ensure userAppOffset is interpreted as ulong, not string
  userAppOffset = userAppOffset#asULong();

  //EsScriptDebug::log("cwd: %s", cwd);
  fp = EsPath::createFromFilePath(inFile);
  inFile = fp.pathGet(EsPathFlag$$Default, cwd);
  fp = EsPath::createFromFilePath(outFile);
  outFile = fp.pathGet(EsPathFlag$$Default, cwd);
      
  inf = new EsFile(inFile, EsFileFlag$$Read|EsFileFlag$$Text);
  inf.open();
  hex = inf.readAllAsString();
  inf.close();
  
  EsScriptDebug::log("Converting hex to binary...");
  binary = new EsFwBinary(hex);

  hdrAndApp = binary.patchUserAppCrcExtractUserApp(
    userAppOffset, 
    crcInit
  );

  EsScriptDebug::log("Writing conversion result...");
  of = new EsFile(outFile, EsFileFlag$$Write|EsFileFlag$$Text);
  of.open();
  
  of.stringWrite("// this file is automatically generated and must not be changed\n//\n");
  of.stringWrite("const c_fileHexName = \"");
  of.stringWrite(EsFile::nameExtGet(inFile));
  of.stringWrite("\";\nconst c_start = ");
  of.uint32Write(userAppOffset);
  of.stringWrite(";\nconst c_hdr = B\"");
  of.binBufferWrite(hdrAndApp[0]$buffer);
  of.stringWrite("\";\nconst c_bin = B\"");
  of.binBufferWrite(hdrAndApp[1]);
  of.stringWrite("\";\nconst c_created = \"");
  of.stringWrite( EsDateTime::now() );
  of.stringWrite("\";\n");
  of.close();
}
