// Prepare Quarta Opaque firmware bin image for
// compiled-in usage in firmware programmer module
//

function convert(inFile, inNameParserFile, outFile)
var binary, inf, of, fp, cwd = EsPath::cwdGet();
var regex = new EsRegEx(), patt, typename, major, minor;
{
  EsScriptDebug::log(
    "convert(inFile: %s, inNameParserFile: %s, outFile: %s)", 
    inFile#trace(), 
    inNameParserFile#trace(), 
    outFile#trace()
  );

  fp = EsPath::createFromFilePath(inNameParserFile);
  inNameParserFile = fp.pathGet(EsPathFlag$$Default, cwd);

  inf = new EsFile(
    inNameParserFile, 
    EsFileFlag$$Read |
    EsFileFlag$$Text
  );

  if( !inf.open() )
    throw EsStr::format(
      "Could not open Opaque Firmware name parser file %s",
      inNameParserFile
    );

  patt = inf.readAllAsString();
  inf.close();

  regex$pattern = patt;

  fp = EsPath::createFromFilePath(inFile);
  inFile = fp.pathGet(EsPathFlag$$Default, cwd);

  // Parse input binary file name to extract firmware version
  regex$text = fp$fileName;

  EsScriptDebug::log(
    "  pattern: '%s', text: '%s'", 
    patt#trace(), 
    regex$text
  );
  
  if( !regex$matches )
    throw EsStr::format(
      "Could not extract version information from opaque file name %s",
      regex$text
    );

  typename = regex.matchGet(1);
  major = regex.matchGet(2);
  minor = regex.matchGet(3);

  EsScriptDebug::log(
    "  Matched count=%d: typename=%s, major=%s, minor=%s", 
    regex$matchCount,
    typename#trace(), 
    major#trace(),
    minor#trace()
  );

  fp = EsPath::createFromFilePath(outFile);
  outFile = fp.pathGet(EsPathFlag$$Default, cwd);
      
  inf = new EsFile(inFile, EsFileFlag$$Read);
  inf.open();
  
  binary = inf.readAllAsBinBuffer();
  inf.close();
  
  //EsScriptDebug::log("Writing conversion result...");
  of = new EsFile(outFile, EsFileFlag$$Write|EsFileFlag$$Text);
  of.open();
  
  of.stringWrite("// this file is automatically generated and must not be changed\n//\n");
  of.stringWrite("const c_fileBinName = \"");
  of.stringWrite(EsFile::nameExtGet(inFile));
  of.stringWrite("\";\nconst c_bin = B\"");
  of.stringWrite(binary);
  of.stringWrite("\";\nconst c_created = \"");
  of.stringWrite( EsDateTime::now() );
  of.stringWrite("\";\nconst c_typename = \"");
  of.stringWrite( typename );
  of.stringWrite("\";\nconst c_major = \"");
  of.stringWrite( major );
  of.stringWrite("\";\nconst c_minor = \"");
  of.stringWrite( minor );
  of.stringWrite("\";\n");
  of.close();
}
