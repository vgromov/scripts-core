// additional script debug functionality
//
object Debug
{
  function valueDump(val)
  var idx, result = "";
  {
    if( !val#isEmpty() )
    {
      if( EsVariantType$$VAR_STRING == val#typeGet() ) // string
        result = val + "\n";
      else if( val#isIndexed() )
      {
        result = "indexed contents...\n";
        for(idx = 0; idx < val#countGet(); ++idx)
          result += EsStr::format("[%d]=%s", idx, valueDump( val#itemGet(idx) ));
      }
      else if( val#isObject() )
      {
        if( val.hasMethod("asString", 0) )
          result = val#asString() + "\n";
        else
          // object type, size and offset
          result = this.objectDump(val);
      }
      else
        result = val#asString() + "\n";
    }
    else
      result = "null\n";
      
    return result;
  }

  // helper functions for object printout
  function objectDump(obj)
  var names, tmp, idx, result;
  {
    // object value dump
    if( !obj#isObject() )
      return valueDump(obj);

    result = EsStr::format("type '%s', size=%d, offset=%d\n", obj$type, obj$size, obj$offset);

    // object attributes
    names = obj$attributeNames;
    for(idx = 0; idx < names.countGet(); ++idx)
    {
      tmp = obj.attributeGet(names[idx]);
      result += EsStr::format("attribute '%s'=%s\n", names[idx], tmp);
    }

    if( obj.hasProperty("value") )
      result += "value=" + valueDump(obj$value);
    else
    {
      // object fields
      names = obj$fieldNames;
      for(idx = 0; idx < names.countGet(); ++idx)
      {
        tmp = obj.fieldGet(names[idx]);
        result += EsStr::format("field '%s::%s' dump\n", obj$type, names[idx]);
        result += valueDump(tmp);
      }
    }

    return result;
  }

}
